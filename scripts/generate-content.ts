import { watch } from "node:fs";
import { mkdir, readFile, readdir, writeFile } from "node:fs/promises";
import path from "node:path";
import { fileURLToPath } from "node:url";
import matter from "gray-matter";
import yaml from "js-yaml";
import MarkdownIt from "markdown-it";
import slugify from "slugify";

type NavigationItem = { label: string; href: string };

type ProfileYaml = {
	profile: {
		name: string;
		title: string;
		summary: string;
		location: string;
		contact: {
			phone?: string;
			email?: string;
			linkedin?: string;
			github?: string;
		};
	};
	skills: {
		strengths: string[];
		languages: string[];
		applied_ml: string[];
		data_cloud: string[];
		automation: string[];
		devops: string[];
		analytics: string[];
	};
	work_history: Array<{
		role: string;
		company: string;
		location: string;
		period: { start: string; end: string };
		type: string;
		summary?: string;
		achievements: string[];
	}>;
	projects: ProjectSummary[];
	case_studies: CaseStudyOutline[];
	site_preferences: {
		navigation: NavigationItem[];
		show_vitals_bar?: boolean;
	};
	seo_defaults: {
		title_template: string;
		description: string;
		og_image_generator?: string;
	};
	schema_org: {
		person: {
			url?: string;
		};
	};
};

type ProjectCard = {
	slug: string;
	title: string;
	summary: string;
	results: string[];
	tags: string[];
	image?: string;
	links: {
		caseStudy: string;
		repo?: string;
	};
	updatedAt: string;
};

type ProjectSummary = {
	slug: string;
	title: string;
	context: string;
	summary: string;
	results: string[];
	metrics: string[];
	stack: string[];
	links: {
		caseStudy: string;
		repo?: string;
	};
};

type CaseStudyOutline = {
	slug: string;
	title: string;
	date: string;
	tags: string[];
	og: {
		title: string;
		description: string;
	};
	schemaType: string;
	metrics: string[];
	stack: string[];
	links: { repo?: string; demo?: string };
	outline: {
		context: string;
		problem: string;
		approach: string;
		results: string;
		architecture?: string;
		responsibilities?: string[];
	};
};

type CaseStudy = {
	meta: CaseStudyMeta;
	html: string;
	excerpt: string;
};

type CaseStudyMeta = {
	title: string;
	date: string;
	slug: string;
	tags: string[];
	ogTitle: string;
	ogDescription: string;
	schemaType: string;
	metrics: string[];
	stack: string[];
	links: { repo?: string; demo?: string };
	summarySocial?: {
		linkedin?: string;
		twitter?: string;
	};
};

const markdown = new MarkdownIt({ html: true, linkify: true, breaks: false });

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const projectRoot = path.resolve(__dirname, "..");
const contentDir = path.join(projectRoot, "content");
const pagesDir = path.join(projectRoot, "src", "pages");
const generatedNotice =
	"<!-- Generated by scripts/generate-content.ts. Do not edit by hand. -->";

async function loadProfile(): Promise<ProfileYaml> {
	const raw = await readFile(path.join(contentDir, "profile.yaml"), "utf8");
	return yaml.load(raw) as ProfileYaml;
}

async function loadProjects(): Promise<ProjectCard[]> {
	const raw = await readFile(path.join(contentDir, "projects.json"), "utf8");
	return JSON.parse(raw) as ProjectCard[];
}

async function loadCaseStudies(): Promise<CaseStudy[]> {
	const dir = path.join(contentDir, "case-studies");
	const files = await readdir(dir);
	const studies: CaseStudy[] = [];

	for (const file of files) {
		if (!file.endsWith(".md")) continue;
		const raw = await readFile(path.join(dir, file), "utf8");
		const parsed = matter(raw);
		const meta = parsed.data as CaseStudyMeta;
		const html = markdown.render(parsed.content);
		const excerpt = createExcerpt(parsed.content);
		studies.push({ meta, html, excerpt });
	}

	studies.sort((a, b) => (a.meta.date < b.meta.date ? 1 : -1));
	return studies;
}

function createExcerpt(markdownContent: string): string {
	const firstParagraph =
		markdownContent.split("\n").find((line) => line.trim().length > 0) ?? "";
	return firstParagraph.replace(/^#+\s*/, "").trim();
}

function escapeHtml(value: string): string {
	return value
		.replace(/&/g, "&amp;")
		.replace(/</g, "&lt;")
		.replace(/>/g, "&gt;")
		.replace(/"/g, "&quot;")
		.replace(/'/g, "&#39;");
}

function toDisplayDate(raw: string): string {
	const date = new Date(`${raw}T00:00:00Z`);
	return date.toLocaleDateString("en-US", {
		month: "short",
		year: "numeric",
	});
}

type LayoutOptions = {
	title: string;
	description?: string;
	body: string;
	currentNav?: string;
	canonicalPath: string;
	scripts?: string[];
	headExtra?: string;
	bodyExtra?: string;
};

function createLayoutGenerator(
	profile: ProfileYaml,
	navItems: NavigationItem[],
	seoDefaults: ProfileYaml["seo_defaults"],
) {
	const baseUrl = profile.schema_org?.person?.url ?? "https://example.com";
	const name = profile.profile.name;

	return function renderLayout({
		title,
		description,
		body,
		currentNav,
		canonicalPath,
		scripts = [],
		headExtra = "",
		bodyExtra = "",
	}: LayoutOptions): string {
		const fullTitle = seoDefaults.title_template.replace("%s", title);
		const metaDescription = description ?? seoDefaults.description;
		const canonicalUrl = new URL(canonicalPath, baseUrl).toString();
		const navHtml = navItems
			.map((item) => {
				const href = normalizeHref(item.href);
				const isCurrent =
					currentNav && normalizeHref(currentNav) === normalizeHref(item.href);
				const aria = isCurrent ? ' aria-current="page"' : "";
				const className = isCurrent
					? "text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-4 focus-visible:outline-primary"
					: "hover:text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-4 focus-visible:outline-primary";
				return `<li><a class="${className}" href="${href}"${aria}>${escapeHtml(item.label)}</a></li>`;
			})
			.join("\n          ");

		const scriptTags = scripts
			.map((src) => `<script type="module" src="${src}"></script>`)
			.join("\n    ");

		return `<!doctype html>
${generatedNotice}
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>${escapeHtml(fullTitle)}</title>
    <meta name="description" content="${escapeHtml(metaDescription)}" />
    <link rel="canonical" href="${escapeHtml(canonicalUrl)}" />
${headExtra ? `    ${headExtra}\n` : ""}  </head>
  <body class="bg-slate-950 text-slate-100 antialiased">
    <a href="#main" class="absolute left-4 top-4 -translate-y-16 rounded bg-primary px-3 py-2 text-sm font-semibold text-primary-foreground focus:translate-y-0 focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-primary">Skip to content</a>
    <header class="mx-auto flex w-full max-w-6xl items-center justify-between px-6 py-8">
      <p class="text-sm font-semibold tracking-wide text-slate-300">${escapeHtml(name)}</p>
      <nav aria-label="Primary">
        <ul class="flex items-center gap-6 text-sm font-medium text-slate-300">
          ${navHtml}
        </ul>
      </nav>
    </header>
${body}
${renderFooter(profile)}
${scriptTags ? `    ${scriptTags}\n` : ""}${bodyExtra ? `    ${bodyExtra}\n` : ""}  </body>
</html>`;
	};
}

function renderFooter(profile: ProfileYaml): string {
	const links: string[] = [];
	const contact = profile.profile.contact;
	if (contact.linkedin) {
		links.push(
			`<a class="hover:text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-4 focus-visible:outline-primary" href="${escapeHtml(contact.linkedin)}">LinkedIn</a>`,
		);
	}
	if (contact.github) {
		links.push(
			`<a class="hover:text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-4 focus-visible:outline-primary" href="${escapeHtml(contact.github)}">GitHub</a>`,
		);
	}
	if (contact.email) {
		links.push(
			`<a class="hover:text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-4 focus-visible:outline-primary" href="mailto:${escapeHtml(contact.email)}">Email</a>`,
		);
	}

	return `    <footer class="border-t border-slate-800 bg-slate-950/40">
      <div class="mx-auto flex w-full max-w-6xl flex-col gap-4 px-6 py-10 text-sm text-slate-400 md:flex-row md:items-center md:justify-between">
        <p>&copy; <span data-current-year></span> ${escapeHtml(profile.profile.name)}. Built for speed, accessibility, and privacy.</p>
        <div class="flex items-center gap-4">
          ${links.join("\n          ")}
        </div>
      </div>
    </footer>`;
}

async function writeHtml(target: string, html: string) {
	await mkdir(path.dirname(target), { recursive: true });
	await writeFile(target, html, "utf8");
}

function normalizeHref(href: string): string {
	if (href === "/") return "/";
	return href.endsWith("/") ? href : `${href}`;
}

function renderMetricCard(value: string, label: string): string {
	return `<div class="rounded-xl border border-slate-800 bg-slate-900/60 p-5">
          <p class="text-3xl font-semibold text-white">${escapeHtml(value)}</p>
          <p class="text-sm text-slate-400">${escapeHtml(label)}</p>
        </div>`;
}

function renderProjectCard(project: ProjectCard): string {
	const tags = project.tags
		.map((tag) => slugify(tag, { lower: true }))
		.join(",");
	const metrics = project.results
		.map(
			(result) =>
				`<li class="text-sm text-slate-300">${escapeHtml(result)}</li>`,
		)
		.join("");
	return `<article class="flex flex-col gap-4 rounded-xl border border-slate-800 bg-slate-900/60 p-6 transition hover:border-slate-700 focus-within:border-primary" data-project-card data-tags="${escapeHtml(tags)}">
            <div class="flex items-center gap-2 text-xs uppercase tracking-[0.3em] text-primary">
              <span>${escapeHtml(project.tags[0] ?? "Project")}</span>
            </div>
            <h3 class="text-xl font-semibold text-white">${escapeHtml(project.title)}</h3>
            <p class="text-sm text-slate-300">${escapeHtml(project.summary)}</p>
            <ul class="flex flex-col gap-1">${metrics}</ul>
            <div class="mt-auto flex items-center justify-between">
              <a class="text-sm font-semibold text-primary underline-offset-4 hover:underline focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-4 focus-visible:outline-primary" href="${escapeHtml(project.links.caseStudy)}">Read case study</a>
              ${project.links.repo ? `<a class="text-sm text-slate-400 hover:text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-4 focus-visible:outline-primary" href="${escapeHtml(project.links.repo)}">Code</a>` : ""}
            </div>
          </article>`;
}

function renderCaseStudyCard(study: CaseStudy): string {
	const meta = study.meta;
	const metrics = meta.metrics
		.slice(0, 2)
		.map(
			(metric) =>
				`<span class="rounded-full border border-slate-700 px-3 py-1 text-xs font-semibold text-slate-200">${escapeHtml(metric)}</span>`,
		)
		.join(" ");
	return `<article class="flex flex-col gap-4 rounded-xl border border-slate-800 bg-slate-900/60 p-6">
          <div class="flex items-center gap-3 text-xs uppercase tracking-[0.3em] text-primary">
            <span>${escapeHtml(new Date(meta.date).toLocaleDateString("en-US", { month: "short", year: "numeric" }))}</span>
          </div>
          <h3 class="text-xl font-semibold text-white">
            <a class="hover:text-primary focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-4 focus-visible:outline-primary" href="/case-studies/${escapeHtml(meta.slug)}/">${escapeHtml(meta.title)}</a>
          </h3>
          <p class="text-sm text-slate-300">${escapeHtml(study.excerpt)}</p>
          <div class="flex flex-wrap gap-2">${metrics}</div>
        </article>`;
}

function renderCaseStudyPage(
	study: CaseStudy,
	layout: ReturnType<typeof createLayoutGenerator>,
	profile: ProfileYaml,
): string {
	const meta = study.meta;
	const metrics = meta.metrics
		.map(
			(metric) =>
				`<li class="rounded-full border border-slate-700 px-3 py-1 text-xs font-semibold text-slate-200">${escapeHtml(metric)}</li>`,
		)
		.join("");
	const tags = meta.tags
		.map(
			(tag) =>
				`<li class="rounded-full border border-slate-800 bg-slate-900 px-3 py-1 text-xs font-semibold text-slate-300">${escapeHtml(tag)}</li>`,
		)
		.join("");
	const stack = meta.stack
		.map(
			(item) =>
				`<li class="rounded-md border border-slate-800 bg-slate-900 px-3 py-1 text-xs font-semibold text-slate-300">${escapeHtml(item)}</li>`,
		)
		.join("");
	const links: string[] = [];
	if (meta.links.repo) {
		links.push(
			`<a class="text-sm font-semibold text-primary underline-offset-4 hover:underline focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-4 focus-visible:outline-primary" href="${escapeHtml(meta.links.repo)}">Source</a>`,
		);
	}
	if (meta.links.demo) {
		links.push(
			`<a class="text-sm font-semibold text-primary underline-offset-4 hover:underline focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-4 focus-visible:outline-primary" href="${escapeHtml(meta.links.demo)}">Live demo</a>`,
		);
	}

	const baseUrl = profile.schema_org?.person?.url ?? "https://example.com";
	const ogImageUrl = `${baseUrl}/api/og?title=${encodeURIComponent(meta.ogTitle)}&metric=${encodeURIComponent(meta.metrics[0] || "")}`;

	const headExtra = [
		generateCreativeWorkSchema(meta, profile),
		`<meta property="og:title" content="${escapeHtml(meta.ogTitle)}" />`,
		`<meta property="og:description" content="${escapeHtml(meta.ogDescription)}" />`,
		`<meta property="og:type" content="article" />`,
		`<meta property="og:url" content="${baseUrl}/case-studies/${meta.slug}/" />`,
		`<meta property="og:image" content="${ogImageUrl}" />`,
		`<meta property="article:published_time" content="${escapeHtml(meta.date)}" />`,
		`<meta name="twitter:card" content="summary_large_image" />`,
		`<meta name="twitter:title" content="${escapeHtml(meta.ogTitle)}" />`,
		`<meta name="twitter:description" content="${escapeHtml(meta.ogDescription)}" />`,
		`<meta name="twitter:image" content="${ogImageUrl}" />`,
	].join("\n    ");

	const body = `    <main id="main" class="mx-auto flex w-full max-w-3xl flex-col gap-12 px-6 pb-24 pt-10">
      <header class="flex flex-col gap-6">
        <a class="text-xs font-semibold text-primary underline-offset-4 hover:underline focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-4 focus-visible:outline-primary" href="/case-studies/">Case studies</a>
        <div class="flex flex-wrap items-center justify-between gap-4">
          <div>
            <p class="text-sm uppercase tracking-[0.4em] text-primary">Case Study</p>
            <h1 class="text-4xl font-semibold leading-tight text-white sm:text-5xl">${escapeHtml(meta.title)}</h1>
          </div>
          <div class="flex flex-wrap gap-2">${tags}</div>
        </div>
        <div class="flex flex-wrap gap-3">${metrics}</div>
        <p class="text-sm text-slate-400">Published ${escapeHtml(toDisplayDate(meta.date))}</p>
      </header>
      <article class="prose prose-invert max-w-none prose-headings:text-white prose-p:text-slate-200 prose-a:text-primary prose-strong:text-white">
${study.html.trim()}
      </article>
      <section aria-labelledby="stack-heading" class="flex flex-col gap-4">
        <h2 id="stack-heading" class="text-lg font-semibold text-white">Stack and tooling</h2>
        <ul class="flex flex-wrap gap-2">${stack}</ul>
      </section>
      <section aria-labelledby="links-heading" class="flex flex-col gap-4">
        <h2 id="links-heading" class="text-lg font-semibold text-white">Links</h2>
        <div class="flex flex-wrap gap-4">${links.join("")}</div>
      </section>
      <section aria-labelledby="cta-heading" class="flex flex-col gap-4 rounded-xl border border-slate-800 bg-slate-900/60 p-6">
        <h2 id="cta-heading" class="text-lg font-semibold text-white">Need similar results?</h2>
        <p class="text-sm text-slate-300">I help teams ship reliable assistants, governed data platforms, and automation with measurable SLOs.</p>
        <a class="self-start rounded-full bg-primary px-6 py-2 text-sm font-semibold text-primary-foreground shadow-lg shadow-primary/40 transition hover:bg-primary/90 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-4 focus-visible:outline-primary" href="/contact/">Work together</a>
      </section>
    </main>`;

	return layout({
		title: meta.title,
		description: meta.ogDescription,
		body,
		currentNav: "/case-studies",
		canonicalPath: `/case-studies/${meta.slug}/`,
		scripts: ["../../../ts/main.ts"],
		headExtra,
	});
}

function renderHomePage(
	profile: ProfileYaml,
	projects: ProjectCard[],
	caseStudies: CaseStudy[],
	layout: ReturnType<typeof createLayoutGenerator>,
): string {
	const featuredProjects = projects
		.slice(0, 3)
		.map((project) => renderProjectCard(project))
		.join("\n        ");
	const featuredCase = caseStudies[0];
	const caseMarkup = featuredCase
		? `<article class="flex flex-col gap-4 rounded-xl border border-slate-800 bg-slate-900/60 p-6">
          <p class="text-sm uppercase tracking-[0.4em] text-primary">Case study</p>
          <h3 class="text-2xl font-semibold text-white">
            <a class="hover:text-primary focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-4 focus-visible:outline-primary" href="/case-studies/${escapeHtml(featuredCase.meta.slug)}/">${escapeHtml(featuredCase.meta.title)}</a>
          </h3>
          <p class="text-sm text-slate-300">${escapeHtml(featuredCase.excerpt)}</p>
          <ul class="flex flex-wrap gap-2">
            ${featuredCase.meta.metrics
							.slice(0, 3)
							.map(
								(metric) =>
									`<li class="rounded-full border border-slate-700 px-3 py-1 text-xs font-semibold text-slate-200">${escapeHtml(metric)}</li>`,
							)
							.join("")}
          </ul>
        </article>`
		: "";

	const metricsSection = [
		renderMetricCard("5-8 s", "WhatsApp assistant p95 latency"),
		renderMetricCard("<1%", "Iceberg lakehouse ingest loss"),
		renderMetricCard("+91%", "Interaction lift after automation"),
	].join("\n        ");

	const baseUrl = profile.schema_org?.person?.url ?? "https://example.com";
	const ogImageUrl = `${baseUrl}/api/og?title=${encodeURIComponent(profile.profile.name)}&subtitle=${encodeURIComponent(profile.profile.title)}`;

	const headExtra = [
		generatePersonSchema(profile),
		`<meta property="og:title" content="${escapeHtml(profile.profile.name)}" />`,
		`<meta property="og:description" content="${escapeHtml(profile.seo_defaults.description)}" />`,
		`<meta property="og:type" content="website" />`,
		`<meta property="og:url" content="${baseUrl}/" />`,
		`<meta property="og:image" content="${ogImageUrl}" />`,
		`<meta name="twitter:card" content="summary_large_image" />`,
		`<meta name="twitter:title" content="${escapeHtml(profile.profile.name)}" />`,
		`<meta name="twitter:description" content="${escapeHtml(profile.seo_defaults.description)}" />`,
		`<meta name="twitter:image" content="${ogImageUrl}" />`,
	].join("\n    ");

	const body = `    <main id="main" class="mx-auto flex w-full max-w-5xl flex-col gap-16 px-6 pb-24 pt-10">
      <section class="flex flex-col gap-6">
        <p class="text-sm uppercase tracking-[0.4em] text-primary">${escapeHtml(profile.profile.title)}</p>
        <h1 class="text-4xl font-semibold leading-tight sm:text-5xl">${escapeHtml(profile.profile.summary)}</h1>
        <p class="max-w-3xl text-base text-slate-300 sm:text-lg">Based in ${escapeHtml(profile.profile.location)}. I build retrieval-augmented assistants, AWS Iceberg platforms, and automation with measurable SLOs and cost controls.</p>
        <div class="flex flex-wrap gap-3">
          <a class="rounded-full bg-primary px-5 py-2 text-sm font-semibold text-primary-foreground shadow-lg shadow-primary/40 transition hover:bg-primary/90 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-4 focus-visible:outline-primary" href="/projects/">View projects</a>
          <a class="rounded-full border border-slate-700 px-5 py-2 text-sm font-semibold text-slate-100 transition hover:border-slate-500 hover:text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-4 focus-visible:outline-primary" href="/contact/">Work together</a>
        </div>
      </section>
      <section aria-labelledby="projects-heading" class="flex flex-col gap-6">
        <div class="flex items-center justify-between gap-3">
          <h2 id="projects-heading" class="text-2xl font-semibold text-white">Featured projects</h2>
          <a class="text-sm font-semibold text-primary underline-offset-4 hover:underline focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-4 focus-visible:outline-primary" href="/projects/">Browse all</a>
        </div>
        <div data-project-grid class="grid gap-6 md:grid-cols-2">
          ${featuredProjects}
        </div>
      </section>
      <section aria-labelledby="case-heading" class="flex flex-col gap-6">
        <h2 id="case-heading" class="text-2xl font-semibold text-white">Latest case study</h2>
        ${caseMarkup}
      </section>
      <section aria-labelledby="metrics-heading" class="grid gap-6 md:grid-cols-3">
        <h2 id="metrics-heading" class="sr-only">Key metrics</h2>
        ${metricsSection}
      </section>
    </main>`;

	return layout({
		title: "Home",
		body,
		currentNav: "/",
		canonicalPath: "/",
		scripts: ["../ts/main.ts"],
		headExtra,
	});
}

function renderProjectsPage(
	projects: ProjectCard[],
	layout: ReturnType<typeof createLayoutGenerator>,
): string {
	const uniqueTags = Array.from(
		new Set(
			projects.flatMap((project) => project.tags.map((tag) => tag.trim())),
		),
	).sort();
	const filterButtons = [
		`<button type="button" class="rounded-full border border-slate-700 px-4 py-2 text-sm font-semibold text-slate-200 data-[state=active]:bg-primary data-[state=active]:text-primary-foreground focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-4 focus-visible:outline-primary" data-filter value="all" aria-pressed="true">All</button>`,
		...uniqueTags.map(
			(tag) =>
				`<button type="button" class="rounded-full border border-slate-700 px-4 py-2 text-sm font-semibold text-slate-200 data-[state=active]:bg-primary data-[state=active]:text-primary-foreground focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-4 focus-visible:outline-primary" data-filter value="${escapeHtml(
					slugify(tag, { lower: true }),
				)}">${escapeHtml(tag)}</button>`,
		),
	].join("\n        ");

	const cards = projects
		.map((project) => renderProjectCard(project))
		.join("\n        ");

	const body = `    <main id="main" class="mx-auto flex w-full max-w-6xl flex-col gap-12 px-6 pb-24 pt-10">
      <header class="flex flex-col gap-4">
        <p class="text-sm uppercase tracking-[0.4em] text-primary">Projects</p>
        <h1 class="text-4xl font-semibold leading-tight sm:text-5xl">Impact-driven engineering work</h1>
        <p class="max-w-3xl text-base text-slate-300 sm:text-lg">Outcome-first stories covering latency, reliability, cost, and adoption. Filter by domain to jump directly to relevant work.</p>
      </header>
      <section aria-labelledby="filters" class="flex flex-wrap items-center gap-4">
        <h2 id="filters" class="text-sm font-semibold uppercase tracking-[0.3em] text-slate-400">Filter</h2>
        <div class="flex flex-wrap gap-3" data-filter-group>
          ${filterButtons}
        </div>
        <p class="sr-only" role="status" aria-live="polite" data-filter-status>Showing all projects.</p>
      </section>
      <section aria-labelledby="project-grid" class="grid gap-6 md:grid-cols-2" data-project-grid>
        ${cards}
      </section>
    </main>`;

	return layout({
		title: "Projects",
		description:
			"Featured engineering work across production RAG, AWS Iceberg lakehouse, and automation initiatives.",
		body,
		currentNav: "/projects",
		canonicalPath: "/projects/",
		scripts: ["../../ts/main.ts", "../../ts/projects.ts"],
	});
}

function renderCaseStudyListing(
	caseStudies: CaseStudy[],
	layout: ReturnType<typeof createLayoutGenerator>,
): string {
	const cards = caseStudies
		.map((study) => renderCaseStudyCard(study))
		.join("\n        ");

	const body = `    <main id="main" class="mx-auto flex w-full max-w-4xl flex-col gap-10 px-6 pb-24 pt-10">
      <header class="flex flex-col gap-4">
        <p class="text-sm uppercase tracking-[0.4em] text-primary">Case studies</p>
        <h1 class="text-4xl font-semibold leading-tight sm:text-5xl">Outcome-first narratives</h1>
        <p class="max-w-2xl text-base text-slate-300 sm:text-lg">Each engagement breaks down the context, problem, approach, and measurable results.</p>
      </header>
      <section aria-labelledby="case-list" class="flex flex-col gap-6" data-case-list>
        <h2 id="case-list" class="sr-only">Case study list</h2>
        ${cards}
      </section>
    </main>`;

	return layout({
		title: "Case Studies",
		body,
		currentNav: "/case-studies",
		canonicalPath: "/case-studies/",
		scripts: ["../../ts/main.ts"],
	});
}

function renderAboutPage(
	profile: ProfileYaml,
	layout: ReturnType<typeof createLayoutGenerator>,
): string {
	const strengths = profile.skills.strengths
		.map(
			(strength) =>
				`<li class="rounded-md border border-slate-800 bg-slate-900 px-3 py-2 text-sm font-semibold text-slate-200">${escapeHtml(strength)}</li>`,
		)
		.join("");

	const timeline = profile.work_history
		.map((item) => {
			const duration = `${escapeHtml(toDisplayDate(item.period.start))} - ${item.period.end === "present" ? "Present" : escapeHtml(toDisplayDate(item.period.end))}`;
			const achievements = item.achievements
				.map(
					(achievement) =>
						`<li class="text-sm text-slate-300">${escapeHtml(achievement)}</li>`,
				)
				.join("");
			return `<li class="flex flex-col gap-3 rounded-xl border border-slate-800 bg-slate-900/60 p-6">
              <div>
                <p class="text-xs uppercase tracking-[0.3em] text-primary">${duration}</p>
                <h3 class="text-lg font-semibold text-white">${escapeHtml(item.role)} · ${escapeHtml(item.company)}</h3>
                <p class="text-sm text-slate-400">${escapeHtml(item.location)} · ${escapeHtml(item.type)}</p>
              </div>
              ${item.summary ? `<p class="text-sm text-slate-300">${escapeHtml(item.summary)}</p>` : ""}
              <ul class="flex list-disc flex-col gap-1 pl-5">${achievements}</ul>
            </li>`;
		})
		.join("");

	const toolSections = [
		["Languages", profile.skills.languages],
		["Applied ML", profile.skills.applied_ml],
		["Data & Cloud", profile.skills.data_cloud],
		["Automation", profile.skills.automation],
		["DevOps", profile.skills.devops],
		["Analytics", profile.skills.analytics],
	].map(
		([title, items]) =>
			`<section class="flex flex-col gap-3 rounded-xl border border-slate-800 bg-slate-900/60 p-5">
          <h3 class="text-sm font-semibold uppercase tracking-[0.3em] text-primary">${escapeHtml(title as string)}</h3>
          <ul class="flex flex-wrap gap-2">
            ${(items as string[])
							.map(
								(item) =>
									`<li class="rounded-md border border-slate-800 bg-slate-950 px-3 py-1 text-xs font-semibold text-slate-200">${escapeHtml(item)}</li>`,
							)
							.join("")}
          </ul>
        </section>`,
	);

	const body = `    <main id="main" class="mx-auto flex w-full max-w-4xl flex-col gap-12 px-6 pb-24 pt-10">
      <header class="flex flex-col gap-4">
        <p class="text-sm uppercase tracking-[0.4em] text-primary">About</p>
        <h1 class="text-4xl font-semibold leading-tight sm:text-5xl">Principles-driven, outcome-first delivery</h1>
        <p class="max-w-2xl text-base text-slate-300 sm:text-lg">${escapeHtml(profile.profile.summary)}</p>
      </header>
      <section aria-labelledby="strengths-heading" class="flex flex-col gap-4">
        <h2 id="strengths-heading" class="text-lg font-semibold text-white">Operating principles</h2>
        <ul class="flex flex-wrap gap-3">${strengths}</ul>
      </section>
      <section aria-labelledby="timeline" class="flex flex-col gap-6">
        <h2 id="timeline" class="text-lg font-semibold text-white">Experience timeline</h2>
        <ol class="flex flex-col gap-6">${timeline}</ol>
      </section>
      <section aria-labelledby="toolbox" class="flex flex-col gap-4">
        <h2 id="toolbox" class="text-lg font-semibold text-white">Toolbox</h2>
        <div class="grid gap-4 md:grid-cols-2">
          ${toolSections.join("")}
        </div>
      </section>
    </main>`;

	return layout({
		title: "About",
		body,
		currentNav: "/about",
		canonicalPath: "/about/",
		scripts: ["../../ts/main.ts"],
	});
}

function renderContactPage(
	profile: ProfileYaml,
	layout: ReturnType<typeof createLayoutGenerator>,
): string {
	const contact = profile.profile.contact;
	const altChannels: string[] = [];
	if (contact.email) {
		altChannels.push(
			`<a class="text-primary underline-offset-4 hover:underline" href="mailto:${escapeHtml(contact.email)}">${escapeHtml(contact.email)}</a>`,
		);
	}
	if (contact.linkedin) {
		altChannels.push(
			`<a class="text-primary underline-offset-4 hover:underline" href="${escapeHtml(contact.linkedin)}">LinkedIn</a>`,
		);
	}
	if (contact.phone) {
		altChannels.push(
			`<a class="text-primary underline-offset-4 hover:underline" href="tel:${escapeHtml(contact.phone)}">${escapeHtml(contact.phone)}</a>`,
		);
	}

	const body = `    <main id="main" class="mx-auto flex w-full max-w-3xl flex-col gap-12 px-6 pb-24 pt-10">
      <header class="flex flex-col gap-4">
        <p class="text-sm uppercase tracking-[0.4em] text-primary">Contact</p>
        <h1 class="text-4xl font-semibold leading-tight sm:text-5xl">Let’s build resilient systems together</h1>
        <p class="max-w-2xl text-base text-slate-300 sm:text-lg">Share project context and desired outcomes. I reply within two business days with a clear next step.</p>
      </header>
      <section>
        <form id="contact-form" method="post" action="/api/contact" class="flex flex-col gap-6" data-contact-form>
          <div class="grid gap-4 md:grid-cols-2">
            <label class="flex flex-col gap-2 text-sm font-medium text-slate-200">
              Name
              <input class="rounded-md border border-slate-700 bg-slate-900 px-4 py-2 text-base text-white focus:border-primary focus:outline-none focus-visible:ring-2 focus-visible:ring-primary" type="text" name="name" autocomplete="name" required />
            </label>
            <label class="flex flex-col gap-2 text-sm font-medium text-slate-200">
              Email
              <input class="rounded-md border border-slate-700 bg-slate-900 px-4 py-2 text-base text-white focus:border-primary focus:outline-none focus-visible:ring-2 focus-visible:ring-primary" type="email" name="email" autocomplete="email" required />
            </label>
          </div>
          <label class="flex flex-col gap-2 text-sm font-medium text-slate-200">
            How can I help?
            <textarea class="h-36 rounded-md border border-slate-700 bg-slate-900 px-4 py-3 text-base text-white focus:border-primary focus:outline-none focus-visible:ring-2 focus-visible:ring-primary" name="message" required></textarea>
          </label>
          <input type="hidden" name="context" value="contact-page" />
          <div data-turnstile-container class="min-h-[80px]" aria-live="polite"></div>
          <div class="flex flex-col gap-3 text-sm text-slate-300" aria-live="polite" data-form-status></div>
          <button type="submit" class="self-start rounded-full bg-primary px-6 py-2 text-sm font-semibold text-primary-foreground shadow-lg shadow-primary/40 transition hover:bg-primary/90 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-4 focus-visible:outline-primary">Send message</button>
        </form>
      </section>
      <section aria-labelledby="alt-channels" class="flex flex-col gap-4">
        <h2 id="alt-channels" class="text-base font-semibold text-white">Prefer async?</h2>
        <p class="text-sm text-slate-300">Reach me via ${altChannels.join(" · ")}.</p>
      </section>
    </main>`;

	return layout({
		title: "Contact",
		body,
		currentNav: "/contact",
		canonicalPath: "/contact/",
		scripts: ["../../ts/main.ts", "../../ts/contact.ts"],
	});
}

function generatePersonSchema(profile: ProfileYaml): string {
	const baseUrl = profile.schema_org?.person?.url ?? "https://example.com";
	const schema = {
		"@context": "https://schema.org",
		"@type": "Person",
		name: profile.profile.name,
		jobTitle: profile.profile.title,
		description: profile.profile.summary,
		url: baseUrl,
		sameAs: [
			profile.profile.contact.linkedin,
			profile.profile.contact.github,
		].filter(Boolean),
		email: profile.profile.contact.email,
		telephone: profile.profile.contact.phone,
		address: {
			"@type": "PostalAddress",
			addressLocality: profile.profile.location,
		},
		knowsAbout: [
			...profile.skills.applied_ml,
			...profile.skills.data_cloud,
			...profile.skills.automation,
		],
	};
	return `<script type="application/ld+json">\n${JSON.stringify(schema, null, 2)}\n    </script>`;
}

function generateCreativeWorkSchema(
	meta: CaseStudyMeta,
	profile: ProfileYaml,
): string {
	const baseUrl = profile.schema_org?.person?.url ?? "https://example.com";
	const schema = {
		"@context": "https://schema.org",
		"@type": meta.schemaType || "CreativeWork",
		name: meta.title,
		description: meta.ogDescription,
		author: {
			"@type": "Person",
			name: profile.profile.name,
		},
		datePublished: meta.date,
		keywords: meta.tags.join(", "),
		url: `${baseUrl}/case-studies/${meta.slug}/`,
	};
	return `<script type="application/ld+json">\n${JSON.stringify(schema, null, 2)}\n    </script>`;
}

async function generateSitemap(
	profile: ProfileYaml,
	caseStudies: CaseStudy[],
): Promise<void> {
	const baseUrl = profile.schema_org?.person?.url ?? "https://example.com";
	const publicDir = path.join(projectRoot, "public");

	const urls = [
		{ loc: "/", priority: "1.0", changefreq: "monthly" },
		{ loc: "/projects/", priority: "0.8", changefreq: "monthly" },
		{ loc: "/case-studies/", priority: "0.8", changefreq: "monthly" },
		{ loc: "/about/", priority: "0.7", changefreq: "monthly" },
		{ loc: "/contact/", priority: "0.6", changefreq: "yearly" },
		...caseStudies.map((study) => ({
			loc: `/case-studies/${study.meta.slug}/`,
			priority: "0.7",
			changefreq: "yearly",
			lastmod: study.meta.date,
		})),
	];

	const sitemap = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
${urls
	.map(
		(url) => `  <url>
    <loc>${baseUrl}${url.loc}</loc>
    ${"lastmod" in url ? `<lastmod>${url.lastmod}</lastmod>\n    ` : ""}<changefreq>${url.changefreq}</changefreq>
    <priority>${url.priority}</priority>
  </url>`,
	)
	.join("\n")}
</urlset>`;

	await writeFile(path.join(publicDir, "sitemap.xml"), sitemap, "utf8");
}

async function generateRobotsTxt(profile: ProfileYaml): Promise<void> {
	const baseUrl = profile.schema_org?.person?.url ?? "https://example.com";
	const publicDir = path.join(projectRoot, "public");

	const robots = `# Allow all crawlers
User-agent: *
Allow: /

# Sitemap location
Sitemap: ${baseUrl}/sitemap.xml

# Disallow API endpoints from indexing
User-agent: *
Disallow: /api/
`;

	await writeFile(path.join(publicDir, "robots.txt"), robots, "utf8");
}

async function generate(): Promise<void> {
	const profile = await loadProfile();
	const projects = await loadProjects();
	const caseStudies = await loadCaseStudies();

	const navItems = profile.site_preferences.navigation;
	const renderLayout = createLayoutGenerator(
		profile,
		navItems,
		profile.seo_defaults,
	);

	await writeHtml(
		path.join(pagesDir, "index.html"),
		renderHomePage(profile, projects, caseStudies, renderLayout),
	);
	await writeHtml(
		path.join(pagesDir, "projects", "index.html"),
		renderProjectsPage(projects, renderLayout),
	);
	await writeHtml(
		path.join(pagesDir, "case-studies", "index.html"),
		renderCaseStudyListing(caseStudies, renderLayout),
	);
	for (const study of caseStudies) {
		await writeHtml(
			path.join(pagesDir, "case-studies", study.meta.slug, "index.html"),
			renderCaseStudyPage(study, renderLayout, profile),
		);
	}
	await writeHtml(
		path.join(pagesDir, "about", "index.html"),
		renderAboutPage(profile, renderLayout),
	);
	await writeHtml(
		path.join(pagesDir, "contact", "index.html"),
		renderContactPage(profile, renderLayout),
	);

	// Generate sitemap.xml and robots.txt
	await generateSitemap(profile, caseStudies);
	await generateRobotsTxt(profile);

	console.info("[generate-content] Generated pages:", [
		"/",
		"/projects/",
		"/case-studies/",
		...caseStudies.map((study) => `/case-studies/${study.meta.slug}/`),
		"/about/",
		"/contact/",
	]);
	console.info("[generate-content] Generated sitemap.xml and robots.txt");
}

function setupWatchers(): void {
	const watchPaths = [
		path.join(contentDir, "profile.yaml"),
		path.join(contentDir, "projects.json"),
		path.join(contentDir, "case-studies"),
	];
	let running = false;
	let rerun = false;

	const trigger = () => {
		if (running) {
			rerun = true;
			return;
		}
		running = true;
		generate()
			.catch((error) => console.error("[generate-content] Error:", error))
			.finally(() => {
				running = false;
				if (rerun) {
					rerun = false;
					trigger();
				}
			});
	};

	for (const target of watchPaths) {
		watch(
			target,
			{ recursive: true, encoding: "utf8" },
			(eventType: "change" | "rename", filename: string | null) => {
				const resolvedName = filename ?? "<unknown>";
				console.info(
					"[generate-content] Change detected:",
					eventType,
					resolvedName,
				);
				trigger();
			},
		);
	}
}

const watchMode = process.argv.includes("--watch");

generate()
	.then(() => {
		if (watchMode) {
			console.info("[generate-content] Watching content for changes…");
			setupWatchers();
		}
	})
	.catch((error) => {
		console.error("[generate-content] Generation failed:", error);
		process.exitCode = 1;
	});
