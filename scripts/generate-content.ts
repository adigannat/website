import { watch } from "node:fs";
import { mkdir, readFile, readdir, writeFile } from "node:fs/promises";
import path from "node:path";
import { fileURLToPath } from "node:url";
import matter from "gray-matter";
import yaml from "js-yaml";
import MarkdownIt from "markdown-it";
import slugify from "slugify";

type NavigationItem = { label: string; href: string };

type ProfileYaml = {
	profile: {
		name: string;
		title: string;
		summary: string;
		location: string;
		contact: {
			phone?: string;
			email?: string;
			linkedin?: string;
			github?: string;
		};
	};
	skills: {
		strengths: string[];
		languages: string[];
		applied_ml: string[];
		data_cloud: string[];
		automation: string[];
		devops: string[];
		analytics: string[];
	};
	work_history: Array<{
		role: string;
		company: string;
		location: string;
		period: { start: string; end: string };
		type: string;
		summary?: string;
		achievements: string[];
	}>;
	testimonials?: Array<{
		author: string;
		role: string;
		company: string;
		avatar: string;
		text: string;
		date: string;
	}>;
	projects: ProjectSummary[];
	case_studies: CaseStudyOutline[];
	site_preferences: {
		navigation: NavigationItem[];
		show_vitals_bar?: boolean;
	};
	seo_defaults: {
		title_template: string;
		description: string;
		og_image_generator?: string;
	};
	schema_org: {
		person: {
			url?: string;
		};
	};
};

type ProjectCard = {
	slug: string;
	title: string;
	summary: string;
	results: string[];
	tags: string[];
	image?: string;
	links: {
		caseStudy: string;
		repo?: string;
	};
	updatedAt: string;
};

type ProjectSummary = {
	slug: string;
	title: string;
	context: string;
	summary: string;
	results: string[];
	metrics: string[];
	stack: string[];
	links: {
		caseStudy: string;
		repo?: string;
	};
};

type CaseStudyOutline = {
	slug: string;
	title: string;
	date: string;
	tags: string[];
	og: {
		title: string;
		description: string;
	};
	schemaType: string;
	metrics: string[];
	stack: string[];
	links: { repo?: string; demo?: string };
	outline: {
		context: string;
		problem: string;
		approach: string;
		results: string;
		architecture?: string;
		responsibilities?: string[];
	};
};

type CaseStudy = {
	meta: CaseStudyMeta;
	html: string;
	excerpt: string;
};

type BlogPost = {
	meta: BlogPostMeta;
	html: string;
	excerpt: string;
};

type BlogPostMeta = {
	title: string;
	date: string;
	slug: string;
	tags: string[];
	excerpt?: string;
	author: string;
	readingTime: string;
};

type CaseStudyMeta = {
	title: string;
	date: string;
	slug: string;
	tags: string[];
	ogTitle: string;
	ogDescription: string;
	schemaType: string;
	metrics: string[];
	stack: string[];
	links: { repo?: string; demo?: string };
	summarySocial?: {
		linkedin?: string;
		twitter?: string;
	};
};

const markdown = new MarkdownIt({ html: true, linkify: true, breaks: false });

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const projectRoot = path.resolve(__dirname, "..");
const contentDir = path.join(projectRoot, "content");
const pagesDir = path.join(projectRoot, "src", "pages");
const generatedNotice =
	"<!-- Generated by scripts/generate-content.ts. Do not edit by hand. -->";

async function loadProfile(): Promise<ProfileYaml> {
	const raw = await readFile(path.join(contentDir, "profile.yaml"), "utf8");
	return yaml.load(raw) as ProfileYaml;
}

async function loadProjects(): Promise<ProjectCard[]> {
	const raw = await readFile(path.join(contentDir, "projects.json"), "utf8");
	return JSON.parse(raw) as ProjectCard[];
}

async function loadCaseStudies(): Promise<CaseStudy[]> {
	const dir = path.join(contentDir, "case-studies");
	const files = await readdir(dir);
	const studies: CaseStudy[] = [];

	for (const file of files) {
		if (!file.endsWith(".md")) continue;
		const raw = await readFile(path.join(dir, file), "utf8");
		const parsed = matter(raw);
		const meta = parsed.data as CaseStudyMeta;
		const html = markdown.render(parsed.content);
		const excerpt = createExcerpt(parsed.content);
		studies.push({ meta, html, excerpt });
	}

	studies.sort((a, b) => (a.meta.date < b.meta.date ? 1 : -1));
	return studies;
}

async function loadBlogPosts(): Promise<BlogPost[]> {
	const dir = path.join(contentDir, "blog");
	try {
		const files = await readdir(dir);
		const posts: BlogPost[] = [];

		for (const file of files) {
			if (!file.endsWith(".md")) continue;
			const raw = await readFile(path.join(dir, file), "utf8");
			const parsed = matter(raw);
			const meta = parsed.data as BlogPostMeta;
			const html = markdown.render(parsed.content);
			const excerpt = meta.excerpt || createExcerpt(parsed.content);
			posts.push({ meta, html, excerpt });
		}

		posts.sort((a, b) => (a.meta.date < b.meta.date ? 1 : -1));
		return posts;
	} catch (error) {
		// Blog directory doesn't exist yet, return empty array
		return [];
	}
}

function createExcerpt(markdownContent: string): string {
	const firstParagraph =
		markdownContent.split("\n").find((line) => line.trim().length > 0) ?? "";
	return firstParagraph.replace(/^#+\s*/, "").trim();
}

function escapeHtml(value: string): string {
	return value
		.replace(/&/g, "&amp;")
		.replace(/</g, "&lt;")
		.replace(/>/g, "&gt;")
		.replace(/"/g, "&quot;")
		.replace(/'/g, "&#39;");
}

function toDisplayDate(raw: string): string {
	const date = new Date(`${raw}T00:00:00Z`);
	return date.toLocaleDateString("en-US", {
		month: "short",
		year: "numeric",
	});
}

const techIconMap: Record<string, string> = {
	fastapi: `<svg class="h-4 w-4 text-primary" viewBox="0 0 24 24" aria-hidden="true"><path fill="currentColor" d="M4.5 4.5h7.5l-2 5h4.5l-6 10v-6H4.5z"/></svg>`,
	pgvector: `<svg class="h-4 w-4 text-accent" viewBox="0 0 24 24" aria-hidden="true"><path fill="currentColor" d="M5 4h14v4H5zm2 6h10v4H7zm3 6h4v4h-4z"/></svg>`,
	slos: `<svg class="h-4 w-4 text-primary" viewBox="0 0 24 24" aria-hidden="true"><path fill="currentColor" d="M5 18l4.5-6 3 4L18 7l1 2-6.5 9-3-4-3.5 5z"/><circle cx="6" cy="6" r="2" fill="currentColor"/></svg>`,
	iceberg: `<svg class="h-4 w-4 text-accent" viewBox="0 0 24 24" aria-hidden="true"><path fill="currentColor" d="M3 18l5-11 4 5 3-6 6 12z"/></svg>`,
	"great-expectations": `<svg class="h-4 w-4 text-primary" viewBox="0 0 24 24" aria-hidden="true"><path fill="currentColor" d="M4 4h16v4H4zm2 6h12v2H6zm0 4h8v2H6zm0 4h5v2H6z"/></svg>`,
	superset: `<svg class="h-4 w-4 text-accent" viewBox="0 0 24 24" aria-hidden="true"><path fill="currentColor" d="M6 5h12v3H6zm2 5h8v3H8zm2 5h4v3h-4z"/></svg>`,
	automation: `<svg class="h-4 w-4 text-primary" viewBox="0 0 24 24" aria-hidden="true"><path fill="currentColor" d="M19 13h-1.18a3 3 0 0 1-5.64 0H7a3 3 0 1 1 0-2h5.18a3 3 0 0 1 5.64 0H19z"/></svg>`,
	enablement: `<svg class="h-4 w-4 text-accent" viewBox="0 0 24 24" aria-hidden="true"><path fill="currentColor" d="M12 4l4 4h-3v6h-2V8H8zM5 18h14v2H5z"/></svg>`,
	analytics: `<svg class="h-4 w-4 text-primary" viewBox="0 0 24 24" aria-hidden="true"><path fill="currentColor" d="M5 19h2V9H5zm6 0h2V5h-2zm6 0h2v-8h-2z"/></svg>`,
	rpa: `<svg class="h-4 w-4 text-primary" viewBox="0 0 24 24" aria-hidden="true"><path fill="currentColor" d="M7 4h10l3 5-8 11-8-11z"/><circle cx="12" cy="9" r="1.5" fill="#1d4ed8"/></svg>`,
	"sap-ariba": `<svg class="h-4 w-4 text-accent" viewBox="0 0 24 24" aria-hidden="true"><path fill="currentColor" d="M12 4l8 8-8 8-8-8z"/><path fill="#0ea5e9" d="M12 7l5 5-5 5-5-5z"/></svg>`,
	default: `<svg class="h-4 w-4 text-slate-300" viewBox="0 0 24 24" aria-hidden="true"><circle cx="12" cy="12" r="10" fill="currentColor" opacity="0.2"/><circle cx="12" cy="12" r="4" fill="currentColor"/></svg>`,
};

const metricIconMap: Record<string, string> = {
	speed: `<svg class="h-6 w-6 text-accent" viewBox="0 0 24 24" aria-hidden="true"><path fill="currentColor" d="M12 4a8 8 0 0 0-8 8h2a6 6 0 0 1 6-6V4zm0 2a6 6 0 0 0-6 6h2a4 4 0 0 1 4-4V6zm0 6 6 6 1.5-1.5L13.5 12H12z"/></svg>`,
	reliability: `<svg class="h-6 w-6 text-primary" viewBox="0 0 24 24" aria-hidden="true"><path fill="currentColor" d="M12 3 2 9l10 6 10-6-10-6zm0 18-8-4.8V11l8 4.8 8-4.8v5.2z"/></svg>`,
	growth: `<svg class="h-6 w-6 text-primary" viewBox="0 0 24 24" aria-hidden="true"><path fill="currentColor" d="M4 17h16v2H4zm3-3h2v3H7zm4-4h2v7h-2zm4-5h2v12h-2z"/><path fill="#0ea5e9" d="M10 13 7 10l1.4-1.4 1.6 1.6 3.6-3.6L15 8z"/></svg>`,
	default: `<svg class="h-6 w-6 text-slate-300" viewBox="0 0 24 24" aria-hidden="true"><circle cx="12" cy="12" r="10" fill="currentColor" opacity="0.2"/><circle cx="12" cy="12" r="4" fill="currentColor"/></svg>`,
};

function renderTechBadge(tag: string): string {
	const slug = slugify(tag, { lower: true });
	const icon = techIconMap[slug] ?? techIconMap.default;
	return `<span class="tech-badge" data-tech="${escapeHtml(slug)}">${icon}<span>${escapeHtml(tag)}</span></span>`;
}

function renderMetricIcon(key: string): string {
	return metricIconMap[key] ?? metricIconMap.default;
}

type LayoutOptions = {
	title: string;
	description?: string;
	body: string;
	currentNav?: string;
	canonicalPath: string;
	scripts?: string[];
	headExtra?: string;
	bodyExtra?: string;
};

function createLayoutGenerator(
	profile: ProfileYaml,
	navItems: NavigationItem[],
	seoDefaults: ProfileYaml["seo_defaults"],
) {
	const baseUrl = profile.schema_org?.person?.url ?? "https://example.com";
	const name = profile.profile.name;

	return function renderLayout({
		title,
		description,
		body,
		currentNav,
		canonicalPath,
		scripts = [],
		headExtra = "",
		bodyExtra = "",
	}: LayoutOptions): string {
		const fullTitle = seoDefaults.title_template.replace("%s", title);
		const metaDescription = description ?? seoDefaults.description;
		const canonicalUrl = new URL(canonicalPath, baseUrl).toString();
		const navHtml = navItems
			.map((item) => {
				const href = normalizeHref(item.href);
				const isCurrent =
					currentNav && normalizeHref(currentNav) === normalizeHref(item.href);
				const aria = isCurrent ? ' aria-current="page"' : "";
				const className = isCurrent
					? "nav-link nav-link--active focus-ring"
					: "nav-link focus-ring";
				return `<li><a class="${className}" href="${href}"${aria}>${escapeHtml(item.label)}</a></li>`;
			})
			.join("\n          ");

		const scriptTags = scripts
			.map((src) => `<script type="module" src="${src}"></script>`)
			.join("\n    ");

		const vitalsBar = profile.site_preferences.show_vitals_bar
			? `<div class="vitals-bar" role="status" aria-live="polite">
      <div class="vitals-item" data-vital="lcp"><span class="vitals-item__label">LCP</span><span class="vitals-item__value" data-vital-value="lcp">= 2.5 s</span></div>
      <div class="vitals-item" data-vital="inp"><span class="vitals-item__label">INP</span><span class="vitals-item__value" data-vital-value="inp">&lt; 200 ms</span></div>
      <div class="vitals-item" data-vital="cls"><span class="vitals-item__label">CLS</span><span class="vitals-item__value" data-vital-value="cls">= 0.1</span></div>
    </div>`
			: "";

		return `<!doctype html>
${generatedNotice}
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>${escapeHtml(fullTitle)}</title>
    <meta name="description" content="${escapeHtml(metaDescription)}" />
    <link rel="canonical" href="${escapeHtml(canonicalUrl)}" />
${headExtra ? `    ${headExtra}\n` : ""}  </head>
  <body class="bg-white text-slate-900 antialiased dark:bg-slate-950 dark:text-slate-100">
    <a href="#main" class="absolute left-4 top-4 -translate-y-16 rounded bg-primary px-3 py-2 text-sm font-semibold text-primary-foreground focus:translate-y-0 focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-primary">Skip to content</a>
    <header class="site-header bg-transparent" data-site-header>
      <div class="site-header__inner">
        <a class="site-logo focus-ring" href="/">${escapeHtml(name)}</a>
        <nav aria-label="Primary" class="site-nav-wrapper">
          <ul class="site-nav">
            ${navHtml}
          </ul>
        </nav>
        <div class="flex items-center gap-3">
          <button type="button" class="mobile-menu-button" data-mobile-menu-button aria-label="Open menu" aria-expanded="false" aria-controls="mobile-menu">
            <span class="mobile-menu-button__line"></span>
            <span class="mobile-menu-button__line"></span>
            <span class="mobile-menu-button__line"></span>
          </button>
          <button type="button" class="search-trigger hidden md:flex" data-search-trigger aria-label="Search site" title="Search (Ctrl+K)">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="h-5 w-5">
              <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z" />
            </svg>
            <span class="hidden lg:inline text-xs text-slate-400">Ctrl+K</span>
          </button>
          <button type="button" class="theme-toggle" data-theme-toggle aria-label="Toggle theme" aria-pressed="true">
            <svg data-theme-icon-sun class="hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">
              <path stroke-linecap="round" stroke-linejoin="round" d="M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z" />
            </svg>
            <svg data-theme-icon-moon xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">
              <path stroke-linecap="round" stroke-linejoin="round" d="M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z" />
            </svg>
          </button>
          <a class="site-cta hidden md:inline-flex focus-ring" href="/resume.pdf" download="Aditya-Ganesh-Resume.pdf" title="Download Resume">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="h-4 w-4">
              <path stroke-linecap="round" stroke-linejoin="round" d="M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5M16.5 12L12 16.5m0 0L7.5 12m4.5 4.5V3" />
            </svg>
            <span class="hidden lg:inline">Resume</span>
          </a>
          <a class="site-cta hidden md:inline-flex focus-ring" href="/contact/">Let's talk</a>
        </div>
      </div>
    </header>
    <div class="mobile-menu-overlay" data-mobile-menu-overlay aria-hidden="true"></div>
    <aside id="mobile-menu" class="mobile-menu-drawer" data-mobile-menu-drawer aria-label="Mobile navigation">
      <div class="mobile-menu-drawer__header">
        <span class="text-xs font-semibold uppercase tracking-[0.35em] text-slate-700 dark:text-slate-300">Menu</span>
        <button type="button" class="mobile-menu-drawer__close" data-mobile-menu-close aria-label="Close menu">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="h-6 w-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      <nav class="mobile-menu-drawer__nav" aria-label="Mobile primary navigation">
        ${navItems
					.map((item) => {
						const href = normalizeHref(item.href);
						const isCurrent =
							currentNav &&
							normalizeHref(currentNav) === normalizeHref(item.href);
						const className = isCurrent
							? "mobile-menu-drawer__link mobile-menu-drawer__link--active"
							: "mobile-menu-drawer__link";
						const ariaCurrent = isCurrent ? ' aria-current="page"' : "";
						return `<a class="${className}" href="${href}"${ariaCurrent}>${escapeHtml(item.label)}</a>`;
					})
					.join("\n        ")}
      </nav>
      <div class="mobile-menu-drawer__footer">
        <div class="flex flex-col gap-3">
          <a class="btn-primary-enhanced block text-center" href="/contact/">Let's talk</a>
          <a class="btn-secondary-enhanced flex items-center justify-center gap-2" href="/resume.pdf" download="Aditya-Ganesh-Resume.pdf">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="h-5 w-5">
              <path stroke-linecap="round" stroke-linejoin="round" d="M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5M16.5 12L12 16.5m0 0L7.5 12m4.5 4.5V3" />
            </svg>
            <span>Download Resume</span>
          </a>
        </div>
      </div>
    </aside>
${vitalsBar ? `    ${vitalsBar}\n` : ""}${body}
${renderFooter(profile)}
${scriptTags ? `    ${scriptTags}\n` : ""}${bodyExtra ? `    ${bodyExtra}\n` : ""}  </body>
</html>`;
	};
}

function renderFooter(profile: ProfileYaml): string {
	const links: string[] = [];
	const contact = profile.profile.contact;
	if (contact.linkedin) {
		links.push(
			`<a class="hover:text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-4 focus-visible:outline-primary" href="${escapeHtml(contact.linkedin)}">LinkedIn</a>`,
		);
	}
	if (contact.github) {
		links.push(
			`<a class="hover:text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-4 focus-visible:outline-primary" href="${escapeHtml(contact.github)}">GitHub</a>`,
		);
	}
	if (contact.email) {
		links.push(
			`<a class="hover:text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-4 focus-visible:outline-primary" href="mailto:${escapeHtml(contact.email)}">Email</a>`,
		);
	}

	return `    <footer class="border-t border-slate-800 bg-slate-950/40">
      <div class="mx-auto flex w-full max-w-6xl flex-col gap-4 px-6 py-10 text-sm text-slate-400 md:flex-row md:items-center md:justify-between">
        <p>&copy; <span data-current-year></span> ${escapeHtml(profile.profile.name)}. Built for speed, accessibility, and privacy.</p>
        <div class="flex items-center gap-4">
          ${links.join("\n          ")}
        </div>
      </div>
    </footer>`;
}

async function writeHtml(target: string, html: string) {
	await mkdir(path.dirname(target), { recursive: true });
	await writeFile(target, html, "utf8");
}

function normalizeHref(href: string): string {
	if (href === "/") return "/";
	if (
		/^(https?:)?\/\//.test(href) ||
		href.startsWith("mailto:") ||
		href.startsWith("tel:")
	) {
		return href;
	}
	return href.endsWith("/") ? href : `${href}/`;
}

function renderMetricCard(icon: string, value: string, label: string): string {
	return `<div class="metric-card" data-animation="fade-in-up">
            <div class="metric-card__icon" aria-hidden="true">${renderMetricIcon(icon)}</div>
            <div class="flex flex-col gap-2">
              <p class="text-6xl font-bold text-white leading-none" data-metric-value="${escapeHtml(value)}">${escapeHtml(
								value,
							)}</p>
              <p class="text-sm text-slate-400">${escapeHtml(label)}</p>
            </div>
          </div>`;
}

function renderProjectCard(
	project: ProjectCard,
	options: { variant?: "default" | "featured" } = {},
): string {
	const { variant = "default" } = options;
	const tags = project.tags
		.map((tag) => slugify(tag, { lower: true }))
		.join(",");

	const firstTag = project.tags[0]?.toLowerCase() ?? "";
	let category = "fastapi";
	if (
		firstTag.includes("iceberg") ||
		firstTag.includes("lakehouse") ||
		firstTag.includes("data")
	) {
		category = "iceberg";
	} else if (
		firstTag.includes("automation") ||
		firstTag.includes("orchestration")
	) {
		category = "automation";
	} else if (firstTag.includes("analytics") || firstTag.includes("metrics")) {
		category = "analytics";
	}

	const metrics = project.results
		.map(
			(result) => `<li class="project-card__metric">${escapeHtml(result)}</li>`,
		)
		.join("");

	const techBadges = project.tags.map((tag) => renderTechBadge(tag)).join("");
	const badgeHtml = `<span class="badge badge-${category}">${escapeHtml(project.tags[0] ?? "Project")}</span>`;
	const classes = [
		"project-card",
		"card-elevated",
		"accent-bar-left",
		`accent-bar-left-${category}`,
		variant === "featured" ? "project-card--featured lg:col-span-2" : "",
	]
		.filter(Boolean)
		.join(" ");

	const imageSrc = project.image ?? "/images/projects/rag-assistant.svg";
	const imageAttributes =
		variant === "featured"
			? `fetchpriority="high" decoding="async"`
			: `loading="lazy" decoding="async"`;
	const imageMarkup = project.image
		? `<figure class="project-card__media" aria-hidden="true">
              <img class="project-card__image" src="${escapeHtml(
								imageSrc,
							)}" alt="" width="640" height="360" ${imageAttributes} />
            </figure>`
		: "";

	const updatedLabel = project.updatedAt
		? `Updated ${escapeHtml(toDisplayDate(project.updatedAt))}`
		: "";
	const caseStudyHref = escapeHtml(normalizeHref(project.links.caseStudy));
	const repoLink =
		project.links.repo && project.links.repo.trim().length > 0
			? `<a class="project-card__secondary focus-ring" href="${escapeHtml(project.links.repo)}">View code</a>`
			: "";

	if (variant === "featured") {
		return `<article class="${classes}" data-project-card data-tags="${escapeHtml(tags)}" data-variant="featured">
              ${imageMarkup}
              <div class="project-card__content">
                <div class="project-card__eyebrow">
                  ${badgeHtml}
                  ${updatedLabel ? `<span class="project-card__updated">${updatedLabel}</span>` : ""}
                </div>
                <h3 class="project-card__title text-display-sm">
                  <a class="focus-ring hover:text-primary" href="${caseStudyHref}">${escapeHtml(project.title)}</a>
                </h3>
                <p class="project-card__summary">${escapeHtml(project.summary)}</p>
                <ul class="project-card__metrics">${metrics}</ul>
                <div class="project-card__tech">${techBadges}</div>
                <div class="project-card__actions">
                  <a class="project-card__primary focus-ring" href="${caseStudyHref}">Dive into case study</a>
                  ${repoLink}
                </div>
              </div>
            </article>`;
	}

	return `<article class="${classes}" data-project-card data-tags="${escapeHtml(tags)}" data-variant="default">
            ${imageMarkup}
            <div class="project-card__content">
              <div class="project-card__eyebrow">
                ${badgeHtml}
                ${updatedLabel ? `<span class="project-card__updated">${updatedLabel}</span>` : ""}
              </div>
              <h3 class="project-card__title">
                <a class="focus-ring hover:text-primary" href="${caseStudyHref}">${escapeHtml(project.title)}</a>
              </h3>
              <p class="project-card__summary">${escapeHtml(project.summary)}</p>
              <ul class="project-card__metrics">${metrics}</ul>
              <div class="project-card__tech">${techBadges}</div>
              <div class="project-card__actions">
                <a class="project-card__primary focus-ring" href="${caseStudyHref}">Read case study</a>
                ${repoLink}
              </div>
            </div>
          </article>`;
}

function renderCaseStudyCard(study: CaseStudy): string {
	const meta = study.meta;
	const metrics = meta.metrics
		.slice(0, 2)
		.map((metric) => `<span class="badge">${escapeHtml(metric)}</span>`)
		.join(" ");
	return `<article class="card-elevated">
          <div class="flex flex-col gap-4 p-6">
            <div class="flex items-center gap-3 text-xs uppercase tracking-[0.3em] text-accent">
              <span>${escapeHtml(new Date(meta.date).toLocaleDateString("en-US", { month: "short", year: "numeric" }))}</span>
            </div>
            <h3 class="text-xl font-semibold text-white">
              <a class="hover:text-primary focus-ring" href="/case-studies/${escapeHtml(meta.slug)}/">${escapeHtml(meta.title)}</a>
            </h3>
            <p class="text-sm text-slate-300">${escapeHtml(study.excerpt)}</p>
            <div class="flex flex-wrap gap-2">${metrics}</div>
          </div>
        </article>`;
}

function renderCaseStudyPage(
	study: CaseStudy,
	layout: ReturnType<typeof createLayoutGenerator>,
	profile: ProfileYaml,
): string {
	const meta = study.meta;
	const metrics = meta.metrics
		.map(
			(metric) =>
				`<li class="rounded-full border border-slate-700 px-3 py-1 text-xs font-semibold text-slate-200">${escapeHtml(metric)}</li>`,
		)
		.join("");
	const tags = meta.tags
		.map(
			(tag) =>
				`<li class="rounded-full border border-slate-800 bg-slate-900 px-3 py-1 text-xs font-semibold text-slate-300">${escapeHtml(tag)}</li>`,
		)
		.join("");
	const stack = meta.stack
		.map(
			(item) =>
				`<li class="rounded-md border border-slate-800 bg-slate-900 px-3 py-1 text-xs font-semibold text-slate-300">${escapeHtml(item)}</li>`,
		)
		.join("");
	const links: string[] = [];
	if (meta.links.repo) {
		links.push(
			`<a class="text-sm font-semibold text-primary underline-offset-4 hover:underline focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-4 focus-visible:outline-primary" href="${escapeHtml(meta.links.repo)}">Source</a>`,
		);
	}
	if (meta.links.demo) {
		links.push(
			`<a class="text-sm font-semibold text-primary underline-offset-4 hover:underline focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-4 focus-visible:outline-primary" href="${escapeHtml(meta.links.demo)}">Live demo</a>`,
		);
	}

	const baseUrl = profile.schema_org?.person?.url ?? "https://example.com";
	const ogImageUrl = `${baseUrl}/api/og?title=${encodeURIComponent(meta.ogTitle)}&metric=${encodeURIComponent(meta.metrics[0] || "")}`;

	const headExtra = [
		generateCreativeWorkSchema(meta, profile),
		`<meta property="og:title" content="${escapeHtml(meta.ogTitle)}" />`,
		`<meta property="og:description" content="${escapeHtml(meta.ogDescription)}" />`,
		`<meta property="og:type" content="article" />`,
		`<meta property="og:url" content="${baseUrl}/case-studies/${meta.slug}/" />`,
		`<meta property="og:image" content="${ogImageUrl}" />`,
		`<meta property="article:published_time" content="${escapeHtml(meta.date)}" />`,
		`<meta name="twitter:card" content="summary_large_image" />`,
		`<meta name="twitter:title" content="${escapeHtml(meta.ogTitle)}" />`,
		`<meta name="twitter:description" content="${escapeHtml(meta.ogDescription)}" />`,
		`<meta name="twitter:image" content="${ogImageUrl}" />`,
	].join("\n    ");

	const body = `    <main id="main" class="mx-auto flex w-full max-w-6xl gap-8 px-6 pb-24 pt-10">
      <div class="flex flex-1 flex-col gap-12">
        <header class="flex flex-col gap-6">
          <a class="text-xs font-semibold text-primary underline-offset-4 hover:underline focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-4 focus-visible:outline-primary" href="/case-studies/">Case studies</a>
          <div class="flex flex-wrap items-center justify-between gap-4">
            <div>
              <p class="text-sm uppercase tracking-[0.4em] text-primary">Case Study</p>
              <h1 class="text-4xl font-semibold leading-tight text-white sm:text-5xl">${escapeHtml(meta.title)}</h1>
            </div>
            <div class="flex flex-wrap gap-2">${tags}</div>
          </div>
          <div class="flex flex-wrap gap-3">${metrics}</div>
          <p class="text-sm text-slate-400">Published ${escapeHtml(toDisplayDate(meta.date))}</p>
        </header>
        <article class="prose prose-invert max-w-none prose-headings:text-white prose-p:text-slate-200 prose-a:text-primary prose-strong:text-white" data-toc-content>
${study.html.trim()}
        </article>
        <section aria-labelledby="stack-heading" class="flex flex-col gap-4">
          <h2 id="stack-heading" class="text-lg font-semibold text-white">Stack and tooling</h2>
          <ul class="flex flex-wrap gap-2">${stack}</ul>
        </section>
        <section aria-labelledby="links-heading" class="flex flex-col gap-4">
          <h2 id="links-heading" class="text-lg font-semibold text-white">Links</h2>
          <div class="flex flex-wrap gap-4">${links.join("")}</div>
        </section>
        <section aria-labelledby="cta-heading" class="card-elevated-primary">
          <div class="flex flex-col gap-4 p-8">
            <h2 id="cta-heading" class="text-xl font-semibold text-white">Need similar results?</h2>
          <p class="text-base text-slate-300">I help teams ship reliable assistants, governed data platforms, and automation with measurable SLOs.</p>
            <a class="btn-primary-enhanced self-start" href="/contact/">Work together</a>
          </div>
        </section>
      </div>
      <aside class="hidden lg:block lg:w-64" data-toc aria-label="Table of contents"></aside>
    </main>`;

	return layout({
		title: meta.title,
		description: meta.ogDescription,
		body,
		currentNav: "/case-studies",
		canonicalPath: `/case-studies/${meta.slug}/`,
		scripts: [
			"../../../ts/main.ts",
			"../../../ts/animations.ts",
			"../../../ts/toc.ts",
		],
		headExtra,
	});
}

function renderHomePage(
	profile: ProfileYaml,
	projects: ProjectCard[],
	caseStudies: CaseStudy[],
	layout: ReturnType<typeof createLayoutGenerator>,
): string {
	const [primaryProject, ...remainingProjects] = projects;
	const supportingProjects = remainingProjects.slice(0, 2);
	const projectGrid = [
		primaryProject
			? renderProjectCard(primaryProject, { variant: "featured" })
			: "",
		...supportingProjects.map((project) => renderProjectCard(project)),
	]
		.filter(Boolean)
		.join("\n        ");

	const heroHighlights = [
		"Production WhatsApp assistant hitting 5-8 s p95 with pgvector retrieval.",
		"AWS Iceberg lakehouse with Superset embeds and <1% data loss.",
		"Automation playbooks delivering +91% interaction lift across teams.",
	]
		.map(
			(highlight) =>
				`<li class="hero-panel__highlight">${escapeHtml(highlight)}</li>`,
		)
		.join("\n              ");
	const heroMeta = [
		{ label: "Location", value: profile.profile.location },
		{
			label: "Focus",
			value: "Applied ML · Data Platforms · Automation",
		},
		{
			label: "Availability",
			value: "Open to senior AI & platform roles",
		},
	]
		.map(
			(item) =>
				`<div class="hero-meta-item"><dt class="hero-meta-label">${escapeHtml(
					item.label,
				)}</dt><dd class="hero-meta-value">${escapeHtml(item.value)}</dd></div>`,
		)
		.join("\n            ");

	const featuredCase = caseStudies[0];
	const caseMarkup = featuredCase
		? `<article class="case-feature card-elevated-accent" data-animation="fade-in-up">
            <div class="case-feature__meta">
              <span class="badge badge-analytics">Case study</span>
              <span class="case-feature__date">${escapeHtml(
								toDisplayDate(featuredCase.meta.date),
							)}</span>
            </div>
            <h3 class="case-feature__title text-3xl font-semibold text-white">
              <a class="focus-ring hover:text-primary" href="/case-studies/${escapeHtml(
								featuredCase.meta.slug,
							)}/">${escapeHtml(featuredCase.meta.title)}</a>
            </h3>
            <p class="case-feature__summary">${escapeHtml(featuredCase.excerpt)}</p>
            <ul class="case-feature__metrics">
              ${featuredCase.meta.metrics
								.slice(0, 3)
								.map((metric) => `<li class="badge">${escapeHtml(metric)}</li>`)
								.join("")}
            </ul>
            <a class="case-feature__cta focus-ring" href="/case-studies/${escapeHtml(
							featuredCase.meta.slug,
						)}/">Read the full breakdown</a>
          </article>`
		: "";

	const metricsSection = [
		renderMetricCard("speed", "5-8 s", "WhatsApp assistant p95 latency"),
		renderMetricCard("reliability", "<1%", "Iceberg lakehouse ingest loss"),
		renderMetricCard("growth", "+91%", "Interaction lift after automation"),
	].join("\n        ");

	const githubSkeleton = Array.from({ length: 3 })
		.map(
			(
				_,
				index,
			) => `<article class="github-card card-elevated" data-github-card>
            <div class="github-card__header shimmer">
              <span class="github-card__repo shimmer-block" aria-hidden="true">Loading repository</span>
              <span class="github-card__stars shimmer-block" aria-hidden="true">?</span>
            </div>
            <p class="github-card__summary shimmer-block" aria-hidden="true">Loading description</p>
            <div class="github-card__topics shimmer-block" aria-hidden="true"></div>
            <span class="sr-only">GitHub repository ${index + 1} loading...</span>
          </article>`,
		)
		.join("\n            ");

	const baseUrl = profile.schema_org?.person?.url ?? "https://example.com";
	const ogImageUrl = `${baseUrl}/api/og?title=${encodeURIComponent(profile.profile.name)}&subtitle=${encodeURIComponent(profile.profile.title)}`;

	const headExtra = [
		generatePersonSchema(profile),
		`<meta property="og:title" content="${escapeHtml(profile.profile.name)}" />`,
		`<meta property="og:description" content="${escapeHtml(profile.seo_defaults.description)}" />`,
		`<meta property="og:type" content="website" />`,
		`<meta property="og:url" content="${baseUrl}/" />`,
		`<meta property="og:image" content="${ogImageUrl}" />`,
		`<meta name="twitter:card" content="summary_large_image" />`,
		`<meta name="twitter:title" content="${escapeHtml(profile.profile.name)}" />`,
		`<meta name="twitter:description" content="${escapeHtml(profile.seo_defaults.description)}" />`,
		`<meta name="twitter:image" content="${ogImageUrl}" />`,
	].join("\n    ");

	const body = `    <main id="main" class="mx-auto flex w-full max-w-6xl flex-col gap-16 px-6 pb-24 pt-10">
      <section class="hero-panel card-elevated-primary relative overflow-hidden rounded-3xl" data-animation="fade-in-up">
        <div class="hero-panel__decor" aria-hidden="true">
          <span class="hero-panel__orb" data-parallax="0.12"></span>
          <span class="hero-panel__mesh" data-parallax="0.06"></span>
        </div>
        <div class="hero-panel__content">
          <div class="hero-panel__eyebrow">
            <span class="hero-chip">${escapeHtml(profile.profile.title)}</span>
            <span class="hero-pill">Shipping RAG, Iceberg, Automation</span>
          </div>
          <h1 class="text-display-lg font-bold leading-tight text-gradient md:text-display-xl">${escapeHtml(profile.profile.name)}</h1>
          <p class="hero-panel__lead">${escapeHtml(profile.profile.summary)}</p>
          <ul class="hero-panel__highlights">
            ${heroHighlights}
          </ul>
          <div class="hero-panel__cta">
            <a class="btn-primary-enhanced" href="/projects/">Explore projects</a>
            <a class="btn-secondary-enhanced" href="/contact/">Book a conversation</a>
          </div>
        </div>
        <aside class="hero-panel__meta" aria-label="At-a-glance details">
          <dl class="hero-meta-list">
            ${heroMeta}
          </dl>
        </aside>
      </section>
      <section aria-labelledby="projects-heading" class="flex flex-col gap-8">
        <div class="section-heading">
          <h2 id="projects-heading" class="section-title">Featured projects</h2>
          <a class="section-link focus-ring" href="/projects/">Browse all</a>
        </div>
        <div data-project-grid class="home-project-grid">
          ${projectGrid}
        </div>
      </section>
      <section aria-labelledby="github-heading" class="flex flex-col gap-6">
        <div class="section-heading">
          <h2 id="github-heading" class="section-title">GitHub activity pulse</h2>
          <p class="section-subtitle">Live repositories for assistants, lakehouses, and automation tooling.</p>
        </div>
        <div class="github-grid" data-github-grid>
          ${githubSkeleton}
        </div>
        <noscript>
          <p class="text-sm text-slate-400">Enable JavaScript to view the latest repositories from GitHub.</p>
        </noscript>
      </section>
      <section aria-labelledby="case-heading" class="flex flex-col gap-6">
        <div class="section-heading">
          <h2 id="case-heading" class="section-title">Latest case study</h2>
        </div>
        ${caseMarkup}
      </section>
      <section aria-labelledby="metrics-heading" class="metrics-grid" data-animation="fade-in-up">
        <h2 id="metrics-heading" class="sr-only">Key metrics</h2>
        ${metricsSection}
      </section>
      <section class="cta-panel card-elevated-accent" data-animation="fade-in-up">
        <div class="cta-panel__content">
          <h2 class="cta-panel__title">Need someone to harden AI systems end-to-end?</h2>
          <p class="cta-panel__body">Let's audit your data contracts, guardrails, and adoption plan together.</p>
        </div>
        <div class="cta-panel__actions">
          <a class="btn-primary-enhanced" href="/contact/">Start the conversation</a>
          <a class="btn-secondary-enhanced" href="/case-studies/">Review case studies</a>
        </div>
      </section>
    </main>`;

	return layout({
		title: "Home",
		body,
		currentNav: "/",
		canonicalPath: "/",
		scripts: ["../ts/main.ts", "../ts/animations.ts", "../ts/home.ts"],
		headExtra,
	});
}

function renderProjectsPage(
	projects: ProjectCard[],
	layout: ReturnType<typeof createLayoutGenerator>,
): string {
	const uniqueTags = Array.from(
		new Set(
			projects.flatMap((project) => project.tags.map((tag) => tag.trim())),
		),
	).sort();
	const filterButtons = [
		`<button type="button" class="filter-pill" data-filter value="all" aria-pressed="true">All</button>`,
		...uniqueTags.map((tag) => {
			const value = slugify(tag, { lower: true });
			return `<button type="button" class="filter-pill" data-filter value="${escapeHtml(
				value,
			)}" aria-pressed="false">${escapeHtml(tag)}</button>`;
		}),
	].join("\n        ");

	const [featuredProject, ...otherProjects] = projects;
	const cards = [
		featuredProject
			? renderProjectCard(featuredProject, { variant: "featured" })
			: "",
		...otherProjects.map((project) => renderProjectCard(project)),
	]
		.filter(Boolean)
		.join("\n        ");

	const body = `    <main id="main" class="mx-auto flex w-full max-w-6xl flex-col gap-12 px-6 pb-24 pt-10">
      <header class="page-hero" data-animation="fade-in-up">
        <p class="page-eyebrow text-primary">Projects</p>
        <h1 class="text-display-lg font-semibold leading-tight text-white md:text-display-xl">Impact-driven engineering work</h1>
        <p class="page-lead max-w-3xl">Outcome-first stories covering latency, reliability, cost, and adoption. Filter by domain to jump directly to relevant build logs.</p>
        <ul class="page-metrics">
          <li><span>5-8 s</span><span>Assistant p95 response</span></li>
          <li><span>&lt;1%</span><span>Lakehouse ingest loss</span></li>
          <li><span>+91%</span><span>Automation adoption lift</span></li>
        </ul>
      </header>
      <section aria-labelledby="filters" class="filter-toolbar" data-animation="fade-in-up">
        <h2 id="filters" class="filter-toolbar__label">Filter</h2>
        <div class="flex flex-wrap gap-3" data-filter-group>
          ${filterButtons}
        </div>
        <p class="sr-only" role="status" aria-live="polite" data-filter-status>Showing all projects.</p>
      </section>
      <section aria-labelledby="project-grid" class="projects-grid" data-project-grid>
        ${cards}
      </section>
    </main>`;

	return layout({
		title: "Projects",
		description:
			"Featured engineering work across production RAG, AWS Iceberg lakehouse, and automation initiatives.",
		body,
		currentNav: "/projects",
		canonicalPath: "/projects/",
		scripts: [
			"../../ts/main.ts",
			"../../ts/animations.ts",
			"../../ts/projects.ts",
		],
	});
}

function renderCaseStudyListing(
	caseStudies: CaseStudy[],
	layout: ReturnType<typeof createLayoutGenerator>,
): string {
	const cards = caseStudies
		.map((study) => renderCaseStudyCard(study))
		.join("\n        ");

	const body = `    <main id="main" class="mx-auto flex w-full max-w-4xl flex-col gap-10 px-6 pb-24 pt-10">
      <header class="page-hero" data-animation="fade-in-up">
        <p class="page-eyebrow text-primary">Case studies</p>
        <h1 class="text-display-lg font-semibold leading-tight text-white md:text-display-xl">Outcome-first narratives</h1>
        <p class="page-lead max-w-2xl">Each engagement breaks down context, problem, approach, and measurable outcomes.</p>
      </header>
      <section aria-labelledby="case-list" class="flex flex-col gap-6" data-case-list>
        <h2 id="case-list" class="sr-only">Case study list</h2>
        ${cards}
      </section>
    </main>`;

	return layout({
		title: "Case Studies",
		body,
		currentNav: "/case-studies",
		canonicalPath: "/case-studies/",
		scripts: ["../../ts/main.ts", "../../ts/animations.ts"],
	});
}

function renderBlogPostCard(post: BlogPost): string {
	const meta = post.meta;
	const tags = meta.tags
		.slice(0, 3)
		.map((tag) => `<span class="badge">${escapeHtml(tag)}</span>`)
		.join(" ");
	return `<article class="card-elevated hover:shadow-primary transition-shadow">
          <div class="flex flex-col gap-4 p-6">
            <div class="flex items-center justify-between gap-3 text-xs text-slate-400">
              <time datetime="${escapeHtml(meta.date)}">${escapeHtml(toDisplayDate(meta.date))}</time>
              <span>${escapeHtml(meta.readingTime)}</span>
            </div>
            <h3 class="text-xl font-semibold text-white">
              <a class="hover:text-primary focus-ring" href="/blog/${escapeHtml(meta.slug)}/">${escapeHtml(meta.title)}</a>
            </h3>
            <p class="text-sm text-slate-300">${escapeHtml(post.excerpt)}</p>
            <div class="flex flex-wrap gap-2">${tags}</div>
          </div>
        </article>`;
}

function renderBlogPost(
	post: BlogPost,
	layout: ReturnType<typeof createLayoutGenerator>,
	profile: ProfileYaml,
): string {
	const meta = post.meta;
	const tags = meta.tags
		.map(
			(tag) =>
				`<span class="rounded-full border border-slate-800 bg-slate-900 px-3 py-1 text-xs font-semibold text-slate-300">${escapeHtml(tag)}</span>`,
		)
		.join("");

	const baseUrl = profile.schema_org?.person?.url ?? "https://example.com";
	const ogImageUrl = `${baseUrl}/api/og?title=${encodeURIComponent(meta.title)}&subtitle=Blog`;

	const headExtra = [
		`<meta property="og:title" content="${escapeHtml(meta.title)}" />`,
		`<meta property="og:description" content="${escapeHtml(post.excerpt)}" />`,
		`<meta property="og:type" content="article" />`,
		`<meta property="og:url" content="${baseUrl}/blog/${meta.slug}/" />`,
		`<meta property="og:image" content="${ogImageUrl}" />`,
		`<meta property="article:published_time" content="${escapeHtml(meta.date)}" />`,
		`<meta property="article:author" content="${escapeHtml(meta.author)}" />`,
		`<meta name="twitter:card" content="summary_large_image" />`,
		`<meta name="twitter:title" content="${escapeHtml(meta.title)}" />`,
		`<meta name="twitter:description" content="${escapeHtml(post.excerpt)}" />`,
		`<meta name="twitter:image" content="${ogImageUrl}" />`,
	].join("\n    ");

	const body = `    <main id="main" class="mx-auto flex w-full max-w-6xl gap-8 px-6 pb-24 pt-10">
      <div class="flex flex-1 flex-col gap-12">
        <header class="flex flex-col gap-6">
          <a class="text-xs font-semibold text-primary underline-offset-4 hover:underline focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-4 focus-visible:outline-primary" href="/blog/">Blog</a>
          <div class="flex flex-wrap items-center justify-between gap-4">
            <div>
              <p class="text-sm uppercase tracking-[0.4em] text-primary">Blog Post</p>
              <h1 class="text-4xl font-semibold leading-tight text-white sm:text-5xl">${escapeHtml(meta.title)}</h1>
            </div>
            <div class="flex flex-wrap gap-2">${tags}</div>
          </div>
          <div class="flex items-center gap-4 text-sm text-slate-400">
            <time datetime="${escapeHtml(meta.date)}">${escapeHtml(toDisplayDate(meta.date))}</time>
            <span>·</span>
            <span>${escapeHtml(meta.readingTime)}</span>
            <span>·</span>
            <span>By ${escapeHtml(meta.author)}</span>
          </div>
        </header>
        <article class="prose prose-invert max-w-none prose-headings:text-white prose-p:text-slate-200 prose-a:text-primary prose-strong:text-white prose-code:text-accent prose-pre:bg-slate-900 prose-pre:border prose-pre:border-slate-800" data-toc-content>
${post.html.trim()}
        </article>
        <section aria-labelledby="cta-heading" class="card-elevated-primary">
          <div class="flex flex-col gap-4 p-8">
            <h2 id="cta-heading" class="text-xl font-semibold text-white">Enjoyed this article?</h2>
            <p class="text-base text-slate-300">I write about production ML systems, data platforms, and engineering best practices. <a href="/blog/" class="text-primary hover:underline">Read more posts</a> or <a href="/contact/" class="text-primary hover:underline">let's connect</a>.</p>
          </div>
        </section>
      </div>
      <aside class="hidden lg:block lg:w-64" data-toc aria-label="Table of contents"></aside>
    </main>`;

	return layout({
		title: meta.title,
		description: post.excerpt,
		body,
		currentNav: "/blog",
		canonicalPath: `/blog/${meta.slug}/`,
		scripts: [
			"../../../ts/main.ts",
			"../../../ts/animations.ts",
			"../../../ts/toc.ts",
		],
		headExtra,
	});
}

function renderBlogListing(
	blogPosts: BlogPost[],
	layout: ReturnType<typeof createLayoutGenerator>,
): string {
	const cards = blogPosts
		.map((post) => renderBlogPostCard(post))
		.join("\n        ");

	const body = `    <main id="main" class="mx-auto flex w-full max-w-4xl flex-col gap-10 px-6 pb-24 pt-10">
      <header class="page-hero" data-animation="fade-in-up">
        <p class="page-eyebrow text-primary">Blog</p>
        <h1 class="text-display-lg font-semibold leading-tight text-white md:text-display-xl">Technical writings</h1>
        <p class="page-lead max-w-2xl">Insights from building production ML systems, data platforms, and automation at scale.</p>
      </header>
      <section aria-labelledby="blog-list" class="flex flex-col gap-6" data-blog-list>
        <h2 id="blog-list" class="sr-only">Blog post list</h2>
        ${cards}
      </section>
    </main>`;

	return layout({
		title: "Blog",
		body,
		currentNav: "/blog",
		canonicalPath: "/blog/",
		scripts: ["../../ts/main.ts", "../../ts/animations.ts"],
	});
}

function renderAboutPage(
	profile: ProfileYaml,
	layout: ReturnType<typeof createLayoutGenerator>,
): string {
	const strengths = profile.skills.strengths
		.map(
			(strength) =>
				`<li class="rounded-md border border-slate-800 bg-slate-900 px-3 py-2 text-sm font-semibold text-slate-200">${escapeHtml(strength)}</li>`,
		)
		.join("");

	const timeline = profile.work_history
		.map((item) => {
			const duration = `${escapeHtml(toDisplayDate(item.period.start))} - ${item.period.end === "present" ? "Present" : escapeHtml(toDisplayDate(item.period.end))}`;
			const achievements = item.achievements
				.map(
					(achievement) =>
						`<li class="text-sm text-slate-300">${escapeHtml(achievement)}</li>`,
				)
				.join("");
			return `<li class="flex flex-col gap-3 rounded-xl border border-slate-800 bg-slate-900/60 p-6">
              <div>
                <p class="text-xs uppercase tracking-[0.3em] text-primary">${duration}</p>
                <h3 class="text-lg font-semibold text-white">${escapeHtml(item.role)} · ${escapeHtml(item.company)}</h3>
                <p class="text-sm text-slate-400">${escapeHtml(item.location)} · ${escapeHtml(item.type)}</p>
              </div>
              ${item.summary ? `<p class="text-sm text-slate-300">${escapeHtml(item.summary)}</p>` : ""}
              <ul class="flex list-disc flex-col gap-1 pl-5">${achievements}</ul>
            </li>`;
		})
		.join("");

	const skillCategories = [
		["Languages", profile.skills.languages],
		["Applied ML", profile.skills.applied_ml],
		["Data & Cloud", profile.skills.data_cloud],
		["Automation", profile.skills.automation],
		["DevOps", profile.skills.devops],
		["Analytics", profile.skills.analytics],
	];

	const toolSections = skillCategories.map(
		([title, items]) =>
			`<section class="flex flex-col gap-3 rounded-xl border border-slate-800 bg-slate-900/60 p-5" data-skill-category="${escapeHtml(title as string)}" data-skill-count="${(items as string[]).length}">
          <h3 class="text-sm font-semibold uppercase tracking-[0.3em] text-primary">${escapeHtml(title as string)}</h3>
          <ul class="flex flex-wrap gap-2">
            ${(items as string[])
							.map(
								(item) =>
									`<li class="rounded-md border border-slate-800 bg-slate-950 px-3 py-1 text-xs font-semibold text-slate-200">${escapeHtml(item)}</li>`,
							)
							.join("")}
          </ul>
        </section>`,
	);

	const testimonials = profile.testimonials || [];
	const testimonialsSection =
		testimonials.length > 0 ? renderTestimonialsCarousel(testimonials) : "";

	const body = `    <main id="main" class="mx-auto flex w-full max-w-4xl flex-col gap-12 px-6 pb-24 pt-10">
      <header class="page-hero" data-animation="fade-in-up">
        <p class="page-eyebrow text-primary">About</p>
        <h1 class="text-display-lg font-semibold leading-tight text-white md:text-display-xl">Principles-driven, outcome-first delivery</h1>
        <p class="page-lead max-w-2xl">${escapeHtml(profile.profile.summary)}</p>
      </header>
      <section aria-labelledby="strengths-heading" class="flex flex-col gap-4">
        <h2 id="strengths-heading" class="text-lg font-semibold text-white">Operating principles</h2>
        <ul class="flex flex-wrap gap-3">${strengths}</ul>
      </section>
      <section aria-labelledby="timeline" class="flex flex-col gap-6">
        <h2 id="timeline" class="text-lg font-semibold text-white">Experience timeline</h2>
        <ol class="flex flex-col gap-6">${timeline}</ol>
      </section>
      ${testimonialsSection}
      <section aria-labelledby="skills-viz" class="flex flex-col gap-6">
        <h2 id="skills-viz" class="text-lg font-semibold text-white">Skills Dashboard</h2>
        <div data-skills-viz class="animate-fade-in"></div>
      </section>
      <section aria-labelledby="toolbox" class="flex flex-col gap-4">
        <h2 id="toolbox" class="text-lg font-semibold text-white">Toolbox</h2>
        <div class="grid gap-4 md:grid-cols-2">
          ${toolSections.join("")}
        </div>
      </section>
    </main>`;

	return layout({
		title: "About",
		body,
		currentNav: "/about",
		canonicalPath: "/about/",
		scripts: [
			"../../ts/main.ts",
			"../../ts/animations.ts",
			"../../ts/skills-viz.ts",
			"../../ts/testimonials-carousel.ts",
		],
	});
}

function renderTestimonialsCarousel(
	testimonials: Array<{
		author: string;
		role: string;
		company: string;
		avatar: string;
		text: string;
		date: string;
	}>,
): string {
	if (!testimonials || testimonials.length === 0) {
		return "";
	}

	const slides = testimonials
		.map((testimonial, index) => {
			// Generate initials for avatar fallback
			const initials = testimonial.author
				.split(" ")
				.map((n) => n[0])
				.join("")
				.toUpperCase();

			return `<div class="testimonial-slide ${index === 0 ? "testimonial-slide--active" : "hidden"}" data-testimonial-slide aria-hidden="${index === 0 ? "false" : "true"}">
          <div class="testimonial-card">
            <p class="testimonial-quote">"${escapeHtml(testimonial.text)}"</p>
            <div class="testimonial-author">
              <div class="testimonial-avatar">
                <span>${initials}</span>
              </div>
              <div class="testimonial-author-info">
                <p class="testimonial-author-name">${escapeHtml(testimonial.author)}</p>
                <p class="testimonial-author-role">${escapeHtml(testimonial.role)}</p>
              </div>
            </div>
          </div>
        </div>`;
		})
		.join("");

	const indicators = testimonials
		.map(
			(_, index) =>
				`<button type="button" class="testimonial-indicator ${index === 0 ? "testimonial-indicator--active" : ""}" data-testimonial-indicator aria-label="Go to testimonial ${index + 1}" aria-current="${index === 0 ? "true" : "false"}" tabindex="${index === 0 ? "0" : "-1"}"></button>`,
		)
		.join("");

	return `<section aria-labelledby="testimonials-heading" class="flex flex-col gap-6">
      <h2 id="testimonials-heading" class="text-lg font-semibold text-white">What colleagues say</h2>
      <div class="testimonials-carousel" data-testimonials-carousel>
        <div class="testimonials-track" data-testimonials-track>
          ${slides}
        </div>
        <div class="testimonials-nav">
          <button type="button" class="testimonials-button" data-testimonials-prev aria-label="Previous testimonial" disabled aria-disabled="true">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="h-5 w-5">
              <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
            </svg>
          </button>
          <div class="testimonials-indicators">
            ${indicators}
          </div>
          <button type="button" class="testimonials-button" data-testimonials-next aria-label="Next testimonial" aria-disabled="false">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="h-5 w-5">
              <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
            </svg>
          </button>
        </div>
        <div class="sr-only" aria-live="polite" aria-atomic="true" data-testimonials-live></div>
      </div>
    </section>`;
}

function renderContactPage(
	profile: ProfileYaml,
	layout: ReturnType<typeof createLayoutGenerator>,
): string {
	const contact = profile.profile.contact;
	const altChannels: string[] = [];
	if (contact.email) {
		altChannels.push(
			`<a class="text-primary underline-offset-4 hover:underline" href="mailto:${escapeHtml(contact.email)}">${escapeHtml(contact.email)}</a>`,
		);
	}
	if (contact.linkedin) {
		altChannels.push(
			`<a class="text-primary underline-offset-4 hover:underline" href="${escapeHtml(contact.linkedin)}">LinkedIn</a>`,
		);
	}
	if (contact.phone) {
		altChannels.push(
			`<a class="text-primary underline-offset-4 hover:underline" href="tel:${escapeHtml(contact.phone)}">${escapeHtml(contact.phone)}</a>`,
		);
	}

	const body = `    <main id="main" class="mx-auto flex w-full max-w-3xl flex-col gap-12 px-6 pb-24 pt-10">
      <header class="page-hero" data-animation="fade-in-up">
        <p class="page-eyebrow text-primary">Contact</p>
        <h1 class="text-display-lg font-semibold leading-tight text-white md:text-display-xl">Let's build resilient systems together</h1>
        <p class="page-lead max-w-2xl">Share project context and desired outcomes. I reply within two business days with a clear next step.</p>
      </header>
      <section>
        <form id="contact-form" method="post" action="/api/contact" class="flex flex-col gap-6" data-contact-form>
          <div class="grid gap-4 md:grid-cols-2">
            <label class="flex flex-col gap-2 text-sm font-medium text-slate-200">
              Name
              <input class="rounded-md border border-slate-700 bg-slate-900 px-4 py-2 text-base text-white focus:border-primary focus:outline-none focus-visible:ring-2 focus-visible:ring-primary" type="text" name="name" autocomplete="name" required />
            </label>
            <label class="flex flex-col gap-2 text-sm font-medium text-slate-200">
              Email
              <input class="rounded-md border border-slate-700 bg-slate-900 px-4 py-2 text-base text-white focus:border-primary focus:outline-none focus-visible:ring-2 focus-visible:ring-primary" type="email" name="email" autocomplete="email" required />
            </label>
          </div>
          <label class="flex flex-col gap-2 text-sm font-medium text-slate-200">
            How can I help?
            <textarea class="h-36 rounded-md border border-slate-700 bg-slate-900 px-4 py-3 text-base text-white focus:border-primary focus:outline-none focus-visible:ring-2 focus-visible:ring-primary" name="message" required></textarea>
          </label>
          <input type="hidden" name="context" value="contact-page" />
          <div data-turnstile-container class="min-h-[80px]" aria-live="polite"></div>
          <div class="flex flex-col gap-3 text-sm text-slate-300" aria-live="polite" data-form-status></div>
          <button type="submit" class="btn-primary-enhanced self-start">Send message</button>
        </form>
      </section>
      <section aria-labelledby="alt-channels" class="flex flex-col gap-4">
        <h2 id="alt-channels" class="text-base font-semibold text-white">Prefer async?</h2>
        <p class="text-sm text-slate-300">Reach me via ${altChannels.join(" · ")}.</p>
      </section>
    </main>`;

	return layout({
		title: "Contact",
		body,
		currentNav: "/contact",
		canonicalPath: "/contact/",
		scripts: [
			"../../ts/main.ts",
			"../../ts/animations.ts",
			"../../ts/contact.ts",
		],
	});
}

function generatePersonSchema(profile: ProfileYaml): string {
	const baseUrl = profile.schema_org?.person?.url ?? "https://example.com";
	const schema = {
		"@context": "https://schema.org",
		"@type": "Person",
		name: profile.profile.name,
		jobTitle: profile.profile.title,
		description: profile.profile.summary,
		url: baseUrl,
		sameAs: [
			profile.profile.contact.linkedin,
			profile.profile.contact.github,
		].filter(Boolean),
		email: profile.profile.contact.email,
		telephone: profile.profile.contact.phone,
		address: {
			"@type": "PostalAddress",
			addressLocality: profile.profile.location,
		},
		knowsAbout: [
			...profile.skills.applied_ml,
			...profile.skills.data_cloud,
			...profile.skills.automation,
		],
	};
	return `<script type="application/ld+json">\n${JSON.stringify(schema, null, 2)}\n    </script>`;
}

function generateCreativeWorkSchema(
	meta: CaseStudyMeta,
	profile: ProfileYaml,
): string {
	const baseUrl = profile.schema_org?.person?.url ?? "https://example.com";
	const schema = {
		"@context": "https://schema.org",
		"@type": meta.schemaType || "CreativeWork",
		name: meta.title,
		description: meta.ogDescription,
		author: {
			"@type": "Person",
			name: profile.profile.name,
		},
		datePublished: meta.date,
		keywords: meta.tags.join(", "),
		url: `${baseUrl}/case-studies/${meta.slug}/`,
	};
	return `<script type="application/ld+json">\n${JSON.stringify(schema, null, 2)}\n    </script>`;
}

async function generateSitemap(
	profile: ProfileYaml,
	caseStudies: CaseStudy[],
	blogPosts: BlogPost[],
): Promise<void> {
	const baseUrl = profile.schema_org?.person?.url ?? "https://example.com";
	const publicDir = path.join(projectRoot, "public");

	const urls = [
		{ loc: "/", priority: "1.0", changefreq: "monthly" },
		{ loc: "/projects/", priority: "0.8", changefreq: "monthly" },
		{ loc: "/case-studies/", priority: "0.8", changefreq: "monthly" },
		{ loc: "/blog/", priority: "0.8", changefreq: "weekly" },
		{ loc: "/about/", priority: "0.7", changefreq: "monthly" },
		{ loc: "/contact/", priority: "0.6", changefreq: "yearly" },
		...caseStudies.map((study) => ({
			loc: `/case-studies/${study.meta.slug}/`,
			priority: "0.7",
			changefreq: "yearly",
			lastmod: study.meta.date,
		})),
		...blogPosts.map((post) => ({
			loc: `/blog/${post.meta.slug}/`,
			priority: "0.7",
			changefreq: "monthly",
			lastmod: post.meta.date,
		})),
	];

	const sitemap = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
${urls
	.map(
		(url) => `  <url>
    <loc>${baseUrl}${url.loc}</loc>
    ${"lastmod" in url ? `<lastmod>${url.lastmod}</lastmod>\n    ` : ""}<changefreq>${url.changefreq}</changefreq>
    <priority>${url.priority}</priority>
  </url>`,
	)
	.join("\n")}
</urlset>`;

	await writeFile(path.join(publicDir, "sitemap.xml"), sitemap, "utf8");
}

async function generateRobotsTxt(profile: ProfileYaml): Promise<void> {
	const baseUrl = profile.schema_org?.person?.url ?? "https://example.com";
	const publicDir = path.join(projectRoot, "public");

	const robots = `# Allow all crawlers
User-agent: *
Allow: /

# Sitemap location
Sitemap: ${baseUrl}/sitemap.xml

# Disallow API endpoints from indexing
User-agent: *
Disallow: /api/
`;

	await writeFile(path.join(publicDir, "robots.txt"), robots, "utf8");
}

async function generateSearchIndex(
	profile: ProfileYaml,
	projects: ProjectCard[],
	caseStudies: CaseStudy[],
	blogPosts: BlogPost[],
): Promise<void> {
	const publicDir = path.join(projectRoot, "public");

	// Build search index with all searchable content
	const searchIndex: Array<{
		type: string;
		title: string;
		excerpt: string;
		url: string;
		tags: string[];
	}> = [
		{
			type: "page",
			title: "Home",
			excerpt:
				"Applied ML Engineer building production RAG and AWS Iceberg platforms.",
			url: "/",
			tags: [],
		},
		{
			type: "page",
			title: "Projects",
			excerpt:
				"Technical projects and case studies showcasing production systems.",
			url: "/projects/",
			tags: [],
		},
		{
			type: "page",
			title: "About",
			excerpt: `${profile.profile.summary} ${profile.skills.strengths.join(", ")}`,
			url: "/about/",
			tags: [],
		},
		{
			type: "page",
			title: "Contact",
			excerpt:
				"Get in touch to discuss ML projects, data platforms, or collaboration opportunities.",
			url: "/contact/",
			tags: [],
		},
		{
			type: "page",
			title: "Blog",
			excerpt:
				"Technical articles on software engineering, ML systems, and architecture.",
			url: "/blog/",
			tags: [],
		},
		...projects.map((project) => ({
			type: "project",
			title: project.title,
			excerpt: project.summary,
			url: `/projects/#${project.slug}`,
			tags: project.tags,
		})),
		...caseStudies.map((study) => ({
			type: "case-study",
			title: study.meta.title,
			excerpt: study.excerpt,
			url: `/case-studies/${study.meta.slug}/`,
			tags: study.meta.tags,
		})),
		...blogPosts.map((post) => ({
			type: "blog",
			title: post.meta.title,
			excerpt: post.meta.excerpt || post.excerpt,
			url: `/blog/${post.meta.slug}/`,
			tags: post.meta.tags,
		})),
	];

	await writeFile(
		path.join(publicDir, "search-index.json"),
		JSON.stringify(searchIndex, null, 2),
		"utf8",
	);
}

async function generateRssFeed(
	profile: ProfileYaml,
	blogPosts: BlogPost[],
): Promise<void> {
	const baseUrl = profile.schema_org?.person?.url ?? "https://example.com";
	const publicDir = path.join(projectRoot, "public");
	const author = profile.profile.name;
	const email = profile.profile.contact.email;

	// Sort posts by date (newest first)
	const sortedPosts = [...blogPosts].sort(
		(a, b) => new Date(b.meta.date).getTime() - new Date(a.meta.date).getTime(),
	);

	// Get the most recent post date for lastBuildDate
	const lastBuildDate =
		sortedPosts.length > 0
			? new Date(sortedPosts[0].meta.date).toUTCString()
			: new Date().toUTCString();

	const rss = `<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>${author}'s Blog</title>
    <link>${baseUrl}/blog/</link>
    <description>Technical articles on software engineering, ML, and system design</description>
    <language>en-us</language>
    <lastBuildDate>${lastBuildDate}</lastBuildDate>
    <atom:link href="${baseUrl}/rss.xml" rel="self" type="application/rss+xml" />
${sortedPosts
	.map(
		(post) => `    <item>
      <title>${escapeXml(post.meta.title)}</title>
      <link>${baseUrl}/blog/${post.meta.slug}/</link>
      <guid isPermaLink="true">${baseUrl}/blog/${post.meta.slug}/</guid>
      <pubDate>${new Date(post.meta.date).toUTCString()}</pubDate>
      <author>${email} (${author})</author>
      <description>${escapeXml(post.meta.excerpt || post.excerpt)}</description>
      ${post.meta.tags.map((tag) => `<category>${escapeXml(tag)}</category>`).join("\n      ")}
    </item>`,
	)
	.join("\n")}
  </channel>
</rss>`;

	await writeFile(path.join(publicDir, "rss.xml"), rss, "utf8");
}

function escapeXml(text: string): string {
	return text
		.replace(/&/g, "&amp;")
		.replace(/</g, "&lt;")
		.replace(/>/g, "&gt;")
		.replace(/"/g, "&quot;")
		.replace(/'/g, "&apos;");
}

async function generate(): Promise<void> {
	const profile = await loadProfile();
	const projects = await loadProjects();
	const caseStudies = await loadCaseStudies();
	const blogPosts = await loadBlogPosts();

	const navItems = profile.site_preferences.navigation;
	const renderLayout = createLayoutGenerator(
		profile,
		navItems,
		profile.seo_defaults,
	);

	await writeHtml(
		path.join(pagesDir, "index.html"),
		renderHomePage(profile, projects, caseStudies, renderLayout),
	);
	await writeHtml(
		path.join(pagesDir, "projects", "index.html"),
		renderProjectsPage(projects, renderLayout),
	);
	await writeHtml(
		path.join(pagesDir, "case-studies", "index.html"),
		renderCaseStudyListing(caseStudies, renderLayout),
	);
	for (const study of caseStudies) {
		await writeHtml(
			path.join(pagesDir, "case-studies", study.meta.slug, "index.html"),
			renderCaseStudyPage(study, renderLayout, profile),
		);
	}
	await writeHtml(
		path.join(pagesDir, "about", "index.html"),
		renderAboutPage(profile, renderLayout),
	);
	await writeHtml(
		path.join(pagesDir, "contact", "index.html"),
		renderContactPage(profile, renderLayout),
	);

	// Generate blog pages
	await writeHtml(
		path.join(pagesDir, "blog", "index.html"),
		renderBlogListing(blogPosts, renderLayout),
	);
	for (const post of blogPosts) {
		await writeHtml(
			path.join(pagesDir, "blog", post.meta.slug, "index.html"),
			renderBlogPost(post, renderLayout, profile),
		);
	}

	// Generate sitemap.xml, RSS feed, search index, and robots.txt
	await generateSitemap(profile, caseStudies, blogPosts);
	await generateRssFeed(profile, blogPosts);
	await generateSearchIndex(profile, projects, caseStudies, blogPosts);
	await generateRobotsTxt(profile);

	console.info("[generate-content] Generated pages:", [
		"/",
		"/projects/",
		"/case-studies/",
		...caseStudies.map((study) => `/case-studies/${study.meta.slug}/`),
		"/blog/",
		...blogPosts.map((post) => `/blog/${post.meta.slug}/`),
		"/about/",
		"/contact/",
	]);
	console.info(
		"[generate-content] Generated sitemap.xml, rss.xml, search-index.json, and robots.txt",
	);
}

function setupWatchers(): void {
	const watchPaths = [
		path.join(contentDir, "profile.yaml"),
		path.join(contentDir, "projects.json"),
		path.join(contentDir, "case-studies"),
		path.join(contentDir, "blog"),
	];
	let running = false;
	let rerun = false;

	const trigger = () => {
		if (running) {
			rerun = true;
			return;
		}
		running = true;
		generate()
			.catch((error) => console.error("[generate-content] Error:", error))
			.finally(() => {
				running = false;
				if (rerun) {
					rerun = false;
					trigger();
				}
			});
	};

	for (const target of watchPaths) {
		watch(
			target,
			{ recursive: true, encoding: "utf8" },
			(eventType: "change" | "rename", filename: string | null) => {
				const resolvedName = filename ?? "<unknown>";
				console.info(
					"[generate-content] Change detected:",
					eventType,
					resolvedName,
				);
				trigger();
			},
		);
	}
}

const watchMode = process.argv.includes("--watch");

generate()
	.then(() => {
		if (watchMode) {
			console.info("[generate-content] Watching content for changes...");
			setupWatchers();
		}
	})
	.catch((error) => {
		console.error("[generate-content] Generation failed:", error);
		process.exitCode = 1;
	});
